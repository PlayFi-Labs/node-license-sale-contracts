{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/AccessControl.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControlUpgradeable.sol\";\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../utils/StringsUpgradeable.sol\";\nimport \"../utils/introspection/ERC165Upgradeable.sol\";\nimport {Initializable} from \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```solidity\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```solidity\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\n * to enforce additional security measures for this role.\n */\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\n    struct RoleData {\n        mapping(address => bool) members;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with a standardized message including the required role.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     *\n     * _Available since v4.1._\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role);\n        _;\n    }\n\n    function __AccessControl_init() internal onlyInitializing {\n    }\n\n    function __AccessControl_init_unchained() internal onlyInitializing {\n    }\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\n        return _roles[role].members[account];\n    }\n\n    /**\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\n     *\n     * Format of the revert message is described in {_checkRole}.\n     *\n     * _Available since v4.6._\n     */\n    function _checkRole(bytes32 role) internal view virtual {\n        _checkRole(role, _msgSender());\n    }\n\n    /**\n     * @dev Revert with a standard message if `account` is missing `role`.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"AccessControl: account \",\n                        StringsUpgradeable.toHexString(account),\n                        \" is missing role \",\n                        StringsUpgradeable.toHexString(uint256(role), 32)\n                    )\n                )\n            );\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function renounceRole(bytes32 role, address account) public virtual override {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * May emit a {RoleGranted} event.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     *\n     * NOTE: This function is deprecated in favor of {_grantRole}.\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual {\n        if (!hasRole(role, account)) {\n            _roles[role].members[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual {\n        if (hasRole(role, account)) {\n            _roles[role].members[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControlUpgradeable {\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) external;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../../utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```solidity\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n *\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts.\n     *\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\n     * constructor.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = !_initializing;\n        require(\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\n            \"Initializable: contract is already initialized\"\n        );\n        _initialized = 1;\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\n     * are added through upgrades and that require initialization.\n     *\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     *\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier reinitializer(uint8 version) {\n        require(!_initializing && _initialized < version, \"Initializable: contract is already initialized\");\n        _initialized = version;\n        _initializing = true;\n        _;\n        _initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     *\n     * Emits an {Initialized} event the first time it is successfully executed.\n     */\n    function _disableInitializers() internal virtual {\n        require(!_initializing, \"Initializable: contract is initializing\");\n        if (_initialized != type(uint8).max) {\n            _initialized = type(uint8).max;\n            emit Initialized(type(uint8).max);\n        }\n    }\n\n    /**\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\n     */\n    function _getInitializedVersion() internal view returns (uint8) {\n        return _initialized;\n    }\n\n    /**\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\n     */\n    function _isInitializing() internal view returns (bool) {\n        return _initializing;\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     *\n     * Furthermore, `isContract` will also return true if the target contract within\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n     * which only has an effect at the end of a transaction.\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\n\npragma solidity ^0.8.0;\nimport {Initializable} from \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165Upgradeable.sol\";\nimport {Initializable} from \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\n    function __ERC165_init() internal onlyInitializing {\n    }\n\n    function __ERC165_init_unchained() internal onlyInitializing {\n    }\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165Upgradeable {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary MathUpgradeable {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\n                // The surrounding unchecked block does not change this fact.\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1, \"Math: mulDiv overflow\");\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10 ** 64) {\n                value /= 10 ** 64;\n                result += 64;\n            }\n            if (value >= 10 ** 32) {\n                value /= 10 ** 32;\n                result += 32;\n            }\n            if (value >= 10 ** 16) {\n                value /= 10 ** 16;\n                result += 16;\n            }\n            if (value >= 10 ** 8) {\n                value /= 10 ** 8;\n                result += 8;\n            }\n            if (value >= 10 ** 4) {\n                value /= 10 ** 4;\n                result += 4;\n            }\n            if (value >= 10 ** 2) {\n                value /= 10 ** 2;\n                result += 2;\n            }\n            if (value >= 10 ** 1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/math/SignedMathUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard signed math utilities missing in the Solidity language.\n */\nlibrary SignedMathUpgradeable {\n    /**\n     * @dev Returns the largest of two signed numbers.\n     */\n    function max(int256 a, int256 b) internal pure returns (int256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two signed numbers.\n     */\n    function min(int256 a, int256 b) internal pure returns (int256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two signed numbers without overflow.\n     * The result is rounded towards zero.\n     */\n    function average(int256 a, int256 b) internal pure returns (int256) {\n        // Formula from the book \"Hacker's Delight\"\n        int256 x = (a & b) + ((a ^ b) >> 1);\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\n    }\n\n    /**\n     * @dev Returns the absolute unsigned value of a signed value.\n     */\n    function abs(int256 n) internal pure returns (uint256) {\n        unchecked {\n            // must be unchecked in order to support `n = type(int256).min`\n            return uint256(n >= 0 ? n : -n);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./math/MathUpgradeable.sol\";\nimport \"./math/SignedMathUpgradeable.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary StringsUpgradeable {\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = MathUpgradeable.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\n     */\n    function toString(int256 value) internal pure returns (string memory) {\n        return string(abi.encodePacked(value < 0 ? \"-\" : \"\", toString(SignedMathUpgradeable.abs(value))));\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n\n    /**\n     * @dev Returns true if the two strings are equal.\n     */\n    function equal(string memory a, string memory b) internal pure returns (bool) {\n        return keccak256(bytes(a)) == keccak256(bytes(b));\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.2) (utils/cryptography/MerkleProof.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev These functions deal with verification of Merkle Tree proofs.\n *\n * The tree and the proofs can be generated using our\n * https://github.com/OpenZeppelin/merkle-tree[JavaScript library].\n * You will find a quickstart guide in the readme.\n *\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\n * hashing, or use a hash function other than keccak256 for hashing leaves.\n * This is because the concatenation of a sorted pair of internal nodes in\n * the merkle tree could be reinterpreted as a leaf value.\n * OpenZeppelin's JavaScript library generates merkle trees that are safe\n * against this attack out of the box.\n */\nlibrary MerkleProof {\n    /**\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n     * defined by `root`. For this, a `proof` must be provided, containing\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\n     */\n    function verify(bytes32[] memory proof, bytes32 root, bytes32 leaf) internal pure returns (bool) {\n        return processProof(proof, leaf) == root;\n    }\n\n    /**\n     * @dev Calldata version of {verify}\n     *\n     * _Available since v4.7._\n     */\n    function verifyCalldata(bytes32[] calldata proof, bytes32 root, bytes32 leaf) internal pure returns (bool) {\n        return processProofCalldata(proof, leaf) == root;\n    }\n\n    /**\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\n     * hash matches the root of the tree. When processing the proof, the pairs\n     * of leafs & pre-images are assumed to be sorted.\n     *\n     * _Available since v4.4._\n     */\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\n        bytes32 computedHash = leaf;\n        for (uint256 i = 0; i < proof.length; i++) {\n            computedHash = _hashPair(computedHash, proof[i]);\n        }\n        return computedHash;\n    }\n\n    /**\n     * @dev Calldata version of {processProof}\n     *\n     * _Available since v4.7._\n     */\n    function processProofCalldata(bytes32[] calldata proof, bytes32 leaf) internal pure returns (bytes32) {\n        bytes32 computedHash = leaf;\n        for (uint256 i = 0; i < proof.length; i++) {\n            computedHash = _hashPair(computedHash, proof[i]);\n        }\n        return computedHash;\n    }\n\n    /**\n     * @dev Returns true if the `leaves` can be simultaneously proven to be a part of a merkle tree defined by\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\n     *\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\n     *\n     * _Available since v4.7._\n     */\n    function multiProofVerify(\n        bytes32[] memory proof,\n        bool[] memory proofFlags,\n        bytes32 root,\n        bytes32[] memory leaves\n    ) internal pure returns (bool) {\n        return processMultiProof(proof, proofFlags, leaves) == root;\n    }\n\n    /**\n     * @dev Calldata version of {multiProofVerify}\n     *\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\n     *\n     * _Available since v4.7._\n     */\n    function multiProofVerifyCalldata(\n        bytes32[] calldata proof,\n        bool[] calldata proofFlags,\n        bytes32 root,\n        bytes32[] memory leaves\n    ) internal pure returns (bool) {\n        return processMultiProofCalldata(proof, proofFlags, leaves) == root;\n    }\n\n    /**\n     * @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\n     * proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\n     * leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\n     * respectively.\n     *\n     * CAUTION: Not all merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\n     * is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\n     * tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\n     *\n     * _Available since v4.7._\n     */\n    function processMultiProof(\n        bytes32[] memory proof,\n        bool[] memory proofFlags,\n        bytes32[] memory leaves\n    ) internal pure returns (bytes32 merkleRoot) {\n        // This function rebuilds the root hash by traversing the tree up from the leaves. The root is rebuilt by\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\n        // the merkle tree.\n        uint256 leavesLen = leaves.length;\n        uint256 proofLen = proof.length;\n        uint256 totalHashes = proofFlags.length;\n\n        // Check proof validity.\n        require(leavesLen + proofLen - 1 == totalHashes, \"MerkleProof: invalid multiproof\");\n\n        // The xxxPos values are \"pointers\" to the next value to consume in each array. All accesses are done using\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \"pop\".\n        bytes32[] memory hashes = new bytes32[](totalHashes);\n        uint256 leafPos = 0;\n        uint256 hashPos = 0;\n        uint256 proofPos = 0;\n        // At each step, we compute the next hash using two values:\n        // - a value from the \"main queue\". If not all leaves have been consumed, we get the next leaf, otherwise we\n        //   get the next hash.\n        // - depending on the flag, either another value from the \"main queue\" (merging branches) or an element from the\n        //   `proof` array.\n        for (uint256 i = 0; i < totalHashes; i++) {\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\n            bytes32 b = proofFlags[i]\n                ? (leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++])\n                : proof[proofPos++];\n            hashes[i] = _hashPair(a, b);\n        }\n\n        if (totalHashes > 0) {\n            require(proofPos == proofLen, \"MerkleProof: invalid multiproof\");\n            unchecked {\n                return hashes[totalHashes - 1];\n            }\n        } else if (leavesLen > 0) {\n            return leaves[0];\n        } else {\n            return proof[0];\n        }\n    }\n\n    /**\n     * @dev Calldata version of {processMultiProof}.\n     *\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\n     *\n     * _Available since v4.7._\n     */\n    function processMultiProofCalldata(\n        bytes32[] calldata proof,\n        bool[] calldata proofFlags,\n        bytes32[] memory leaves\n    ) internal pure returns (bytes32 merkleRoot) {\n        // This function rebuilds the root hash by traversing the tree up from the leaves. The root is rebuilt by\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\n        // the merkle tree.\n        uint256 leavesLen = leaves.length;\n        uint256 proofLen = proof.length;\n        uint256 totalHashes = proofFlags.length;\n\n        // Check proof validity.\n        require(leavesLen + proofLen - 1 == totalHashes, \"MerkleProof: invalid multiproof\");\n\n        // The xxxPos values are \"pointers\" to the next value to consume in each array. All accesses are done using\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \"pop\".\n        bytes32[] memory hashes = new bytes32[](totalHashes);\n        uint256 leafPos = 0;\n        uint256 hashPos = 0;\n        uint256 proofPos = 0;\n        // At each step, we compute the next hash using two values:\n        // - a value from the \"main queue\". If not all leaves have been consumed, we get the next leaf, otherwise we\n        //   get the next hash.\n        // - depending on the flag, either another value from the \"main queue\" (merging branches) or an element from the\n        //   `proof` array.\n        for (uint256 i = 0; i < totalHashes; i++) {\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\n            bytes32 b = proofFlags[i]\n                ? (leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++])\n                : proof[proofPos++];\n            hashes[i] = _hashPair(a, b);\n        }\n\n        if (totalHashes > 0) {\n            require(proofPos == proofLen, \"MerkleProof: invalid multiproof\");\n            unchecked {\n                return hashes[totalHashes - 1];\n            }\n        } else if (leavesLen > 0) {\n            return leaves[0];\n        } else {\n            return proof[0];\n        }\n    }\n\n    function _hashPair(bytes32 a, bytes32 b) private pure returns (bytes32) {\n        return a < b ? _efficientHash(a, b) : _efficientHash(b, a);\n    }\n\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, a)\n            mstore(0x20, b)\n            value := keccak256(0x00, 0x40)\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/Math.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\n                // The surrounding unchecked block does not change this fact.\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1, \"Math: mulDiv overflow\");\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10 ** 64) {\n                value /= 10 ** 64;\n                result += 64;\n            }\n            if (value >= 10 ** 32) {\n                value /= 10 ** 32;\n                result += 32;\n            }\n            if (value >= 10 ** 16) {\n                value /= 10 ** 16;\n                result += 16;\n            }\n            if (value >= 10 ** 8) {\n                value /= 10 ** 8;\n                result += 8;\n            }\n            if (value >= 10 ** 4) {\n                value /= 10 ** 4;\n                result += 4;\n            }\n            if (value >= 10 ** 2) {\n                value /= 10 ** 2;\n                result += 2;\n            }\n            if (value >= 10 ** 1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/SignedMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard signed math utilities missing in the Solidity language.\n */\nlibrary SignedMath {\n    /**\n     * @dev Returns the largest of two signed numbers.\n     */\n    function max(int256 a, int256 b) internal pure returns (int256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two signed numbers.\n     */\n    function min(int256 a, int256 b) internal pure returns (int256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two signed numbers without overflow.\n     * The result is rounded towards zero.\n     */\n    function average(int256 a, int256 b) internal pure returns (int256) {\n        // Formula from the book \"Hacker's Delight\"\n        int256 x = (a & b) + ((a ^ b) >> 1);\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\n    }\n\n    /**\n     * @dev Returns the absolute unsigned value of a signed value.\n     */\n    function abs(int256 n) internal pure returns (uint256) {\n        unchecked {\n            // must be unchecked in order to support `n = type(int256).min`\n            return uint256(n >= 0 ? n : -n);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./math/Math.sol\";\nimport \"./math/SignedMath.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\n     */\n    function toString(int256 value) internal pure returns (string memory) {\n        return string(abi.encodePacked(value < 0 ? \"-\" : \"\", toString(SignedMath.abs(value))));\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n\n    /**\n     * @dev Returns true if the two strings are equal.\n     */\n    function equal(string memory a, string memory b) internal pure returns (bool) {\n        return keccak256(bytes(a)) == keccak256(bytes(b));\n    }\n}\n"
    },
    "contracts/interfaces/IPlayFiLicenseSale.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.24;\n\n\n/*\n\n                 .-+*###+-.\n               =*%%%%%%%%%%#=:\n               :=*%%%%%%%%%%%#+-.\n                   .-+#%%%%%%%%%%%*=:\n    :+##+-             :=#%%%%%%%%%%%#+-\n   *%%%%%%%*=:            .-+#%%%%%%%%%%*.\n  *%%%%%%%%#+:                :=#%%%%%%%%*\n  #%%%%%%*:         .==:         .*%%%%%%%\n  #%%%%%%=       :+#%%%%#+-       -%%%%#+:\n  #%%%%%%=     :#%%%%%%%%%%#-     -%*=.\n  #%%%%%%=     -%%%%%%%%%%%%=     .\n  #%%%%%%=     -%%%%%%%%%%%%=\n  #%%%%%%=     -%%%%%%%%%%%%=            :\n  #%%%%%%=      .=*%%%%%%*=:         .-+#%\n  #%%%%%%=          -++-.         :=#%%%%%\n  *%%%%%%=                    .-+#%%%%%%%#\n  .#%%%%%=                 :=*%%%%%%%%%%#:\n    =*%%%=       #+-.  .-+#%%%%%%%%%%%*=\n       -+=       #%%%##%%%%%%%%%%%#*-.\n                 #%%%%%%%%%%%%%#=:\n                 #%%%%%%%%%#*-.\n                 :=*%%%%#=:\n\n*/\n\n\n\ninterface IPlayFiLicenseSale\n{\n    struct Tier {\n        uint256 price;\n        uint256 individualCap;\n        uint256 totalClaimed;\n        uint256 totalCap;\n    }\n\n    struct Referral {\n        uint256 totalClaims;\n        address receiver;\n    }\n\n    event TeamLicensesClaimed(address indexed account, uint256 amount);\n    event FriendsFamilyLicensesClaimed(address indexed account, uint256 paid, uint256 amount);\n    event EarlyAccessLicensesClaimed(address indexed account, uint256 paid, uint256 amount);\n    event PartnerLicensesClaimed(address indexed account, uint256 amount, uint256 indexed tier, uint256 paid, string partnerCode, string referral);\n    event CommissionPaid(string code, address indexed receiver, uint256 amount);\n    event PublicLicensesClaimed(address indexed account, uint256 amount, uint256 indexed tier, uint256 paid, string referral);\n    event PublicWhitelistLicensesClaimed(address indexed account, uint256 amount, uint256 indexed tier, uint256 paid, string referral);\n    event ReferralUpdated(string code, address indexed receiver);\n    event TeamMerkleRootSet(bytes32 merkleRoot);\n    event FriendsFamilyMerkleRootSet(bytes32 merkleRoot);\n    event EarlyAccessMerkleRootSet(bytes32 merkleRoot);\n    event PublicMerkleRootSet(bytes32 merkleRoot);\n    event TeamSaleStatusSet(bool status);\n    event FriendsFamilySaleStatusSet(bool status);\n    event EarlyAccessSaleStatusSet(bool status);\n    event PartnerSaleStatusSet(bool status, string partnerCode);\n    event PublicSaleStatusSet(bool status);\n    event PublicWhitelistSaleStatusSet(bool status);\n    event ProceedsWithdrawn(address indexed receiver, uint256 amount);\n    event TierSet(uint256 indexed tierId, uint256 price, uint256 individualCap, uint256 totalClaimed, uint256 totalCap);\n    event WhitelistTierSet(uint256 indexed tierId, uint256 price, uint256 individualCap, uint256 totalClaimed, uint256 totalCap);\n    event PartnerTierSet(string partnerCode, uint256 indexed tierId, uint256 price, uint256 individualCap, uint256 totalClaimed, uint256 totalCap);\n    event PartnerReceiverAddressSet(string partnerCode, address receiver);\n    event ContractInitialized();\n\n    error InvalidAddress(address account);\n    error TeamSaleNotActive();\n    error IndividualClaimCapExceeded();\n    error InvalidProof();\n    error FriendsFamilySaleNotActive();\n    error InsufficientPayment();\n    error EarlyAccessSaleNotActive();\n    error PartnerSaleNotActive();\n    error PublicSaleNotActive();\n    error TotalTierCapExceeded();\n    error IndividualTierCapExceeded();\n    error CommissionPayoutFailed();\n    error WithdrawalFailed();\n    error InvalidTierInputs();\n    error AccessDenied();\n    error InvalidDiscount();\n    error InvalidCommission();\n    error ReferralCodeInUse();\n    error InvalidCode();\n    error PublicWhitelistSaleNotActive();\n\n    function claimLicenseTeam(uint256 amount, bytes calldata data, bytes32[] calldata merkleProof) external;\n\n    function claimLicenseFriendsFamily(uint256 amount, bytes calldata data, bytes32[] calldata merkleProof) external payable;\n\n    function claimLicenseEarlyAccess(uint256 amount, bytes calldata data, bytes32[] calldata merkleProof) external payable;\n\n    function claimLicensePartner(uint256 amount,  uint256 tier, string memory partnerCode, string memory referral) external payable;\n\n    function claimLicensePublic(uint256 amount, uint256 tier, string calldata referral) external payable;\n\n    function claimLicensePublicWhitelist(uint256 amount, uint256 tier, bytes calldata data, bytes32[] calldata merkleProof) external payable;\n\n    function paymentDetailsForReferral(uint256 amount, uint256 tier, string calldata referral, bool isWhitelist) external view returns (uint256 toPay, uint256 commission, uint256 discount);\n\n    function paymentDetailsForPartnerReferral(uint256 amount, uint256 tier, string calldata partnerCode, string calldata referral) external view returns (uint256 toPay, uint256 commission, uint256 discount);\n\n    function getTier(uint256 id, bool isWhitelist) external view returns(Tier memory tier);\n\n    function getPartnerTier(string calldata partnerCode, uint256 id) external view returns(Tier memory tier);\n\n    function getReferral(string memory id) external view returns(Referral memory referral);\n\n    function setReferral(string memory code) external;\n\n    function setReferralForReceiver(string memory code, address receiver) external;\n\n    function setTeamMerkleRoot(bytes32 _teamMerkleRoot) external;\n\n    function setFriendsFamilyMerkleRoot(bytes32 _friendsFamilyMerkleRoot) external;\n\n    function setEarlyAccessMerkleRoot(bytes32 _earlyAccessMerkleRoot) external;\n\n    function setPublicMerkleRoot(bytes32 _publicMerkleRoot) external;\n\n    function setTeamSale(bool status) external;\n\n    function setFriendsFamilySale(bool status) external;\n\n    function setEarlyAccessSale(bool status) external;\n\n    function setPartnerSale(string memory partnerCode, bool status) external;\n\n    function setPublicSale(bool status) external;\n\n    function setTiers(uint256[] calldata ids, uint256[] calldata prices, uint256[] calldata individualCaps, uint256[] calldata totalCaps) external;\n\n    function setWhitelistTiers(uint256[] calldata ids, uint256[] calldata prices, uint256[] calldata individualCaps, uint256[] calldata totalCaps) external;\n\n    function setPartnerTiers(string[] calldata partnerCodes, uint256[] calldata ids, uint256[] calldata prices, uint256[] calldata individualCaps, uint256[] calldata totalCaps) external;\n\n    function setPartnerReceiverAddress(string memory partnerCode, address receiver) external;\n\n    function teamMerkleRoot() external view returns (bytes32);\n\n    function friendsFamilyMerkleRoot() external view returns (bytes32);\n\n    function earlyAccessMerkleRoot() external view returns (bytes32);\n\n    function publicMerkleRoot() external view returns (bytes32);\n\n    function teamSaleActive() external view returns (bool);\n\n    function friendsFamilySaleActive() external view returns (bool);\n\n    function earlyAccessSaleActive() external view returns (bool);\n\n    function partnerSaleActive(string calldata) external view returns (bool);\n\n    function publicSaleActive() external view returns (bool);\n\n    function publicWhitelistSaleActive() external view returns (bool);\n\n    function totalLicenses() external view returns (uint256);\n\n}\n"
    },
    "contracts/interfaces/IPreOrderLicenseClaimer.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.24;\n\n\n/*\n\n                 .-+*###+-.\n               =*%%%%%%%%%%#=:\n               :=*%%%%%%%%%%%#+-.\n                   .-+#%%%%%%%%%%%*=:\n    :+##+-             :=#%%%%%%%%%%%#+-\n   *%%%%%%%*=:            .-+#%%%%%%%%%%*.\n  *%%%%%%%%#+:                :=#%%%%%%%%*\n  #%%%%%%*:         .==:         .*%%%%%%%\n  #%%%%%%=       :+#%%%%#+-       -%%%%#+:\n  #%%%%%%=     :#%%%%%%%%%%#-     -%*=.\n  #%%%%%%=     -%%%%%%%%%%%%=     .\n  #%%%%%%=     -%%%%%%%%%%%%=\n  #%%%%%%=     -%%%%%%%%%%%%=            :\n  #%%%%%%=      .=*%%%%%%*=:         .-+#%\n  #%%%%%%=          -++-.         :=#%%%%%\n  *%%%%%%=                    .-+#%%%%%%%#\n  .#%%%%%=                 :=*%%%%%%%%%%#:\n    =*%%%=       #+-.  .-+#%%%%%%%%%%%*=\n       -+=       #%%%##%%%%%%%%%%%#*-.\n                 #%%%%%%%%%%%%%#=:\n                 #%%%%%%%%%#*-.\n                 :=*%%%%#=:\n\n*/\n\n\n\ninterface IPreOrderLicenseClaimer\n{\n    event Withdrawn(address indexed receiver, uint256 amount);\n    event Received(address indexed sender, uint256 amount);\n    error InvalidLength();\n    error InvalidAddress(address account);\n    error WithdrawalFailed();\n    error AccessDenied();\n\n    function claimPreOrders(uint256[] calldata amounts,uint256[] calldata tiers) external;\n    function withdraw() external;\n\n}\n"
    },
    "contracts/PlayFiLicenseSale.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.24;\n\nimport \"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\";\nimport \"@openzeppelin/contracts/utils/Strings.sol\";\n\nimport \"./interfaces/IPlayFiLicenseSale.sol\";\n\n/*\n\n                 .-+*###+-.\n               =*%%%%%%%%%%#=:\n               :=*%%%%%%%%%%%#+-.\n                   .-+#%%%%%%%%%%%*=:\n    :+##+-             :=#%%%%%%%%%%%#+-\n   *%%%%%%%*=:            .-+#%%%%%%%%%%*.\n  *%%%%%%%%#+:                :=#%%%%%%%%*\n  #%%%%%%*:         .==:         .*%%%%%%%\n  #%%%%%%=       :+#%%%%#+-       -%%%%#+:\n  #%%%%%%=     :#%%%%%%%%%%#-     -%*=.\n  #%%%%%%=     -%%%%%%%%%%%%=     .\n  #%%%%%%=     -%%%%%%%%%%%%=\n  #%%%%%%=     -%%%%%%%%%%%%=            :\n  #%%%%%%=      .=*%%%%%%*=:         .-+#%\n  #%%%%%%=          -++-.         :=#%%%%%\n  *%%%%%%=                    .-+#%%%%%%%#\n  .#%%%%%=                 :=*%%%%%%%%%%#:\n    =*%%%=       #+-.  .-+#%%%%%%%%%%%*=\n       -+=       #%%%##%%%%%%%%%%%#*-.\n                 #%%%%%%%%%%%%%#=:\n                 #%%%%%%%%%#*-.\n                 :=*%%%%#=:\n\n*/\n\n\n/// @title PlayFi node license sale contract\n/// @author Archethect\n/// @notice Contract used to handle whitelist and public node license sales in several tiers.\ncontract PlayFiLicenseSale is\nInitializable,\nAccessControlUpgradeable,\nIPlayFiLicenseSale\n{\n    using Strings for string;\n\n    bytes32 public constant ADMIN_ROLE = keccak256(\"ADMIN\");\n    bytes32 public constant GUARDIAN_ROLE = keccak256(\"GUARDIAN\");\n    bytes32 public constant MERKLE_MANAGER_ROLE = keccak256(\"MERKLE_MANAGER\");\n    bytes32 public constant REFERRAL_MANAGER_ROLE = keccak256(\"REFERRAL_MANAGER\");\n\n    bytes32 public override teamMerkleRoot;\n    bytes32 public override friendsFamilyMerkleRoot;\n    bytes32 public override earlyAccessMerkleRoot;\n    bytes32 public override publicMerkleRoot;\n\n    bool public override teamSaleActive;\n    bool public override friendsFamilySaleActive;\n    bool public override earlyAccessSaleActive;\n    bool public override publicSaleActive;\n    bool public override publicWhitelistSaleActive;\n\n    uint256 public override totalLicenses;\n\n    mapping(address => uint256) public teamClaimsPerAddress;\n    mapping(address => uint256) public friendsFamilyClaimsPerAddress;\n    mapping(address => uint256) public earlyAccessClaimsPerAddress;\n    mapping(string => mapping(address => uint256)) public partnerClaimsPerAddress;\n    mapping(address => uint256) public publicClaimsPerAddress;\n    mapping(address => mapping(string => uint256)) public publicWhitelistClaimsPerAddressAndReferral;\n\n    mapping(uint256 => Tier) public tiers;\n    mapping(uint256 => Tier) public whitelistTiers;\n    mapping(string => mapping(uint256 => Tier)) public partnerTiers;\n    mapping(string => Referral) public referrals;\n    mapping(address => string) public receiverToReferralCode;\n    mapping(uint256 => mapping(address => uint256)) public claimsPerTierPerAddress;\n    mapping(string => mapping(uint256 => mapping(address => uint256))) public partnerClaimsPerTierPerAddress;\n    mapping(string => bool) public partnerSaleActive;\n    mapping(string => Referral) public partnerReferrals;\n\n    /// @custom:oz-upgrades-unsafe-allow constructor\n    constructor() {\n        _disableInitializers();\n    }\n\n    function initialize(\n        address admin,\n        address guardian,\n        address merkleManager,\n        address referralManager\n    ) public initializer {\n        __AccessControl_init();\n\n        if (admin == address(0)) revert InvalidAddress(admin);\n        if (guardian == address(0)) revert InvalidAddress(guardian);\n        if (merkleManager == address(0)) revert InvalidAddress(merkleManager);\n        if (referralManager == address(0)) revert InvalidAddress(referralManager);\n\n        _grantRole(ADMIN_ROLE, admin);\n        _setRoleAdmin(ADMIN_ROLE, ADMIN_ROLE);\n        _grantRole(GUARDIAN_ROLE, guardian);\n        _grantRole(GUARDIAN_ROLE, admin);\n        _setRoleAdmin(GUARDIAN_ROLE, ADMIN_ROLE);\n        _grantRole(MERKLE_MANAGER_ROLE, merkleManager);\n        _setRoleAdmin(MERKLE_MANAGER_ROLE, ADMIN_ROLE);\n        _grantRole(REFERRAL_MANAGER_ROLE, referralManager);\n        _setRoleAdmin(REFERRAL_MANAGER_ROLE, ADMIN_ROLE);\n\n        emit ContractInitialized();\n    }\n\n    /// @notice Claims licenses for team members and make sure they do not exceed their personal claim cap.\n    /// @param amount The amount of licenses to claim\n    /// @param data Index and claimCap in encoded format\n    /// @param merkleProof The proof used to verify whether the caller is allowed to claim the licenses\n    function claimLicenseTeam(uint256 amount, bytes calldata data, bytes32[] calldata merkleProof) public {\n        if(!teamSaleActive) revert TeamSaleNotActive();\n        (uint256 index, uint256 claimCap) = abi.decode(data,(uint256,uint256));\n        uint256 claimedLicenses = teamClaimsPerAddress[msg.sender];\n        if(amount + claimedLicenses > claimCap) revert IndividualClaimCapExceeded();\n        bytes32 node = keccak256(abi.encodePacked(index, msg.sender, claimCap));\n        if (!MerkleProof.verify(merkleProof, teamMerkleRoot, node)) revert InvalidProof();\n        teamClaimsPerAddress[msg.sender] += amount;\n        totalLicenses += amount;\n        emit TeamLicensesClaimed(msg.sender, amount);\n    }\n\n    /// @notice Claims licenses for friends and family + make sure they do not exceed their personal claim cap and that\n    /// they paid enough.\n    /// @param amount The amount of licenses to claim\n    /// @param data Index and claimCap in encoded format\n    /// @param merkleProof The proof used to verify weather the caller is allowed to claim the licenses\n    function claimLicenseFriendsFamily(uint256 amount, bytes calldata data, bytes32[] calldata merkleProof) public payable {\n        if(!friendsFamilySaleActive) revert FriendsFamilySaleNotActive();\n        (uint256 index, uint256 claimCap) = abi.decode(data,(uint256,uint256));\n        uint256 claimedLicenses = friendsFamilyClaimsPerAddress[msg.sender];\n        if(amount + claimedLicenses > claimCap) revert IndividualClaimCapExceeded();\n        bytes32 node = keccak256(abi.encodePacked(index, msg.sender, claimCap));\n        if (!MerkleProof.verify(merkleProof, friendsFamilyMerkleRoot, node)) revert InvalidProof();\n        uint256 toPay = tiers[1].price * amount;\n        if(msg.value < toPay) revert InsufficientPayment();\n        friendsFamilyClaimsPerAddress[msg.sender] += amount;\n        totalLicenses += amount;\n        emit FriendsFamilyLicensesClaimed(msg.sender, toPay, amount);\n    }\n\n    /// @notice Claims licenses for early access addresses + make sure they do not exceed their personal claim cap and\n    /// that they paid enough.\n    /// @param amount The amount of licenses to claim\n    /// @param data Index and claimCap in encoded format\n    /// @param merkleProof The proof used to verify whether the caller is allowed to claim the licenses\n    function claimLicenseEarlyAccess(uint256 amount, bytes calldata data, bytes32[] calldata merkleProof) public payable {\n        if(!earlyAccessSaleActive) revert EarlyAccessSaleNotActive();\n        (uint256 index, uint256 claimCap) = abi.decode(data,(uint256,uint256));\n        uint256 claimedLicenses = earlyAccessClaimsPerAddress[msg.sender];\n        if(amount + claimedLicenses > claimCap) revert IndividualClaimCapExceeded();\n        bytes32 node = keccak256(abi.encodePacked(index, msg.sender, claimCap));\n        if (!MerkleProof.verify(merkleProof, earlyAccessMerkleRoot, node)) revert InvalidProof();\n        uint256 toPay = tiers[1].price * amount;\n        if(msg.value < toPay) revert InsufficientPayment();\n        earlyAccessClaimsPerAddress[msg.sender] += amount;\n        totalLicenses += amount;\n        emit EarlyAccessLicensesClaimed(msg.sender, toPay, amount);\n    }\n\n    /// @notice Claims licenses for partners + make sure they do not exceed their personal claim cap and that\n    /// they paid enough.\n    /// @param amount The amount of licenses to claim\n    /// @param partnerCode The code of the partner sale\n    function claimLicensePartner(uint256 amount,  uint256 tier, string memory partnerCode, string memory referral) public payable {\n        if(!partnerSaleActive[partnerCode]) revert PartnerSaleNotActive();\n        if(partnerTiers[partnerCode][tier].totalClaimed + amount > partnerTiers[partnerCode][tier].totalCap) revert TotalTierCapExceeded();\n        if(partnerClaimsPerTierPerAddress[partnerCode][tier][msg.sender] + amount > partnerTiers[partnerCode][tier].individualCap) revert IndividualTierCapExceeded();\n        (uint256 toPay, uint256 commission,) = paymentDetailsForPartnerReferral(amount, tier, partnerCode, referral);\n        if(msg.value < toPay) revert InsufficientPayment();\n        if(partnerReferrals[partnerCode].receiver != address(0)) {\n            if(commission > 0) {\n                (bool sent, ) = payable(partnerReferrals[partnerCode].receiver).call{ value: commission }(\"\");\n                if (!sent) revert CommissionPayoutFailed();\n                emit CommissionPaid(partnerCode, partnerReferrals[partnerCode].receiver, commission);\n            }\n        } else {\n            if(commission > 0) {\n                (bool sent, ) = payable(referrals[referral].receiver).call{ value: commission }(\"\");\n                if (!sent) revert CommissionPayoutFailed();\n                emit CommissionPaid(referral, referrals[referral].receiver, commission);\n            }\n            referrals[referral].totalClaims += amount;\n        }\n        partnerReferrals[partnerCode].totalClaims += amount;\n        partnerTiers[partnerCode][tier].totalClaimed += amount;\n        partnerClaimsPerAddress[partnerCode][msg.sender] += amount;\n        totalLicenses += amount;\n        emit PartnerLicensesClaimed(msg.sender, amount, tier, toPay, partnerCode, referral);\n    }\n\n    /// @notice Claims licenses for the public in a specific tier + make sure they do not exceed their personal claim\n    /// cap and total tier cap. Additionally also make sure that they paid enough.\n    /// @param amount The amount of licenses to claim\n    /// @param tier The tier to buy the licenses from\n    /// @param referral A referral code that can give discounts.\n    function claimLicensePublic(uint256 amount, uint256 tier, string memory referral) public payable {\n        if(!publicSaleActive) revert PublicSaleNotActive();\n        if(tiers[tier].totalClaimed + amount > tiers[tier].totalCap) revert TotalTierCapExceeded();\n        if(claimsPerTierPerAddress[tier][msg.sender] + amount > tiers[tier].individualCap) revert IndividualTierCapExceeded();\n        (uint256 toPay, uint256 commission,) = paymentDetailsForReferral(amount, tier, referral, false);\n        if(msg.value < toPay) revert InsufficientPayment();\n        if(commission > 0) {\n            (bool sent, ) = payable(referrals[referral].receiver).call{ value: commission }(\"\");\n            if (!sent) revert CommissionPayoutFailed();\n            emit CommissionPaid(referral, referrals[referral].receiver, commission);\n        }\n        tiers[tier].totalClaimed += amount;\n        publicClaimsPerAddress[msg.sender] += amount;\n        totalLicenses += amount;\n        referrals[referral].totalClaims += amount;\n        emit PublicLicensesClaimed(msg.sender, amount, tier, toPay, referral);\n    }\n\n    /// @notice Claims licenses for whitelisted addresses during the public sale + make sure they do not exceed their personal claim cap and that\n    /// they paid enough.\n    /// @param amount The amount of licenses to claim\n    /// @param tier The tier to buy the licenses from\n    /// @param data Index, claimCap and referral in encoded format\n    /// @param merkleProof The proof used to verify weather the caller is allowed to claim the licenses\n    function claimLicensePublicWhitelist(uint256 amount, uint256 tier, bytes calldata data, bytes32[] calldata merkleProof) public payable {\n        if(!publicWhitelistSaleActive) revert PublicWhitelistSaleNotActive();\n        (uint256 index, uint256 claimCap, string memory referral) = abi.decode(data,(uint256,uint256,string));\n        if(whitelistTiers[tier].totalClaimed + amount > whitelistTiers[tier].totalCap) revert TotalTierCapExceeded();\n        uint256 claimedLicenses = publicWhitelistClaimsPerAddressAndReferral[msg.sender][referral];\n        if(amount + claimedLicenses > claimCap) revert IndividualClaimCapExceeded();\n        {\n            bytes32 node = keccak256(abi.encodePacked(index, msg.sender, claimCap, referral));\n            if (!MerkleProof.verify(merkleProof, publicMerkleRoot, node)) revert InvalidProof();\n        }\n        (uint256 toPay, uint256 commission,) = paymentDetailsForReferral(amount, tier, referral, true);\n        if(msg.value < toPay) revert InsufficientPayment();\n        if(commission > 0) {\n            (bool sent, ) = payable(referrals[referral].receiver).call{ value: commission }(\"\");\n            if (!sent) revert CommissionPayoutFailed();\n            emit CommissionPaid(referral, referrals[referral].receiver, commission);\n        }\n        whitelistTiers[tier].totalClaimed += amount;\n        publicWhitelistClaimsPerAddressAndReferral[msg.sender][referral] += amount;\n        totalLicenses += amount;\n        referrals[referral].totalClaims += amount;\n        emit PublicWhitelistLicensesClaimed(msg.sender, amount, tier, toPay, referral);\n    }\n\n    /// @notice Calculates the price, commission and discount for X number of licenses in tier Y given referral code Z\n    /// @param amount The amount of licenses to claim\n    /// @param tier The tier to buy the licenses from\n    /// @param referral A referral code that can give discounts.\n    /// @param isWhitelist Whether the tier is used for the whitelist sale or not\n    /// @return toPay The amount of ETH that should be paid by the claimer.\n    /// @return commission The commission in ETH that the referrer will get.\n    /// @return discount The discount in ETH the claimer will get\n    function paymentDetailsForReferral(uint256 amount, uint256 tier, string memory referral, bool isWhitelist) public view returns (uint256 toPay, uint256 commission, uint256 discount) {\n        uint256 tierPrice;\n        if(isWhitelist) {\n            tierPrice = whitelistTiers[tier].price;\n        } else {\n            tierPrice = tiers[tier].price;\n        }\n        uint256 fullPrice = tierPrice * amount;\n        if(referrals[referral].receiver != address(0)) {\n            uint256 totalClaims = referrals[referral].totalClaims;\n            if(totalClaims < 20) {\n                commission = fullPrice * 10 / 100;\n            } else if (totalClaims < 40) {\n                commission = fullPrice * 11 / 100;\n            } else if (totalClaims < 60) {\n                commission = fullPrice * 12 / 100;\n            } else if (totalClaims < 80) {\n                commission = fullPrice * 13 / 100;\n            } else if (totalClaims < 100) {\n                commission = fullPrice * 14 / 100;\n            } else {\n                commission = fullPrice * 15 / 100;\n            }\n            discount = commission;\n        }\n        toPay = fullPrice - discount;\n    }\n\n    /// @notice Calculates the price, commission and discount for X number of licenses in partner tier Y given partnerCod Z\n    /// @param amount The amount of licenses to claim\n    /// @param tier The tier to buy the licenses from\n    /// @param partnerCode The code identifying the partner sale\n    /// @return toPay The amount of ETH that should be paid by the claimer.\n    /// @return commission The commission in ETH that the referrer will get.\n    /// @return discount The discount in ETH the claimer will get\n    function paymentDetailsForPartnerReferral(uint256 amount, uint256 tier, string memory partnerCode, string memory referral) public view returns (uint256 toPay, uint256 commission, uint256 discount) {\n        uint256 tierPrice = partnerTiers[partnerCode][tier].price;\n        uint256 fullPrice = tierPrice * amount;\n        bool isSmallPartner =  partnerReferrals[partnerCode].receiver != address(0) ? true : false;\n        if(isSmallPartner || referrals[referral].receiver != address(0)) {\n            uint256 totalClaims = isSmallPartner ? partnerReferrals[partnerCode].totalClaims : referrals[referral].totalClaims;\n            if(totalClaims < 20) {\n                commission = fullPrice * 10 / 100;\n            } else if (totalClaims < 40) {\n                commission = fullPrice * 11 / 100;\n            } else if (totalClaims < 60) {\n                commission = fullPrice * 12 / 100;\n            } else if (totalClaims < 80) {\n                commission = fullPrice * 13 / 100;\n            } else if (totalClaims < 100) {\n                commission = fullPrice * 14 / 100;\n            } else {\n                commission = fullPrice * 15 / 100;\n            }\n            discount = commission;\n        }\n        toPay = fullPrice - discount;\n    }\n\n    /// @notice Returns tier details provided a tier id\n    /// @param id The tier id\n    /// @param isWhitelist Whether the tier is used for the whitelist sale or not\n    /// @return tier The tier\n    function getTier(uint256 id, bool isWhitelist) public view returns(Tier memory tier) {\n        if(isWhitelist) {\n            tier = tiers[id];\n        } else {\n            tier = whitelistTiers[id];\n        }\n    }\n\n    /// @notice Returns partner tier details provided a partner code and tier id\n    /// @param partnerCode The code of the partner to return the tier from\n    /// @param id The tier id\n    /// @return tier The tier\n    function getPartnerTier(string calldata partnerCode, uint256 id) public view returns(Tier memory tier) {\n        tier = partnerTiers[partnerCode][id];\n    }\n\n    /// @notice Returns referral details provided a referral id\n    /// @param id The referral id\n    /// @return referral The referral\n    function getReferral(string memory id) public view returns(Referral memory referral) {\n        referral = referrals[id];\n    }\n\n    /// @notice Sets referral details\n    /// @param code The referral code to be used when claiming\n    function setReferral(string memory code) public {\n        _setReferral(code, msg.sender);\n    }\n\n    /// @notice Sets referral details for a specific receiver\n    /// @param code The referral code to be used when claiming\n    /// @param receiver The receiver address for the commissions\n    function setReferralForReceiver(string memory code, address receiver) public onlyReferralManager {\n        _setReferral(code, receiver);\n    }\n\n    /// @notice Sets tier details\n    /// @param ids The ids of the tiers to set\n    /// @param prices The prices of each tier to set\n    /// @param individualCaps The maximum amount of licenses that can be claimed per address for the tiers.\n    /// @param totalCaps The maximum amount of licenses that can be claimed in total for the tiers.\n    function setTiers(uint256[] calldata ids, uint256[] calldata prices, uint256[] calldata individualCaps, uint256[] calldata totalCaps) public onlyAdmin {\n        if(ids.length != prices.length || prices.length != individualCaps.length || individualCaps.length != totalCaps.length) revert InvalidTierInputs();\n        for (uint256 i = 0; i < ids.length; ) {\n            uint256 totalClaimed = tiers[ids[i]].totalClaimed;\n            tiers[ids[i]] = Tier(prices[i], individualCaps[i], totalClaimed, totalCaps[i]);\n            emit TierSet(ids[i], prices[i], individualCaps[i], totalClaimed, totalCaps[i]);\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    /// @notice Sets whitelist tier details\n    /// @param ids The ids of the tiers to set\n    /// @param prices The prices of each tier to set\n    /// @param individualCaps The maximum amount of licenses that can be claimed per address for the tiers.\n    /// @param totalCaps The maximum amount of licenses that can be claimed in total for the tiers.\n    function setWhitelistTiers(uint256[] calldata ids, uint256[] calldata prices, uint256[] calldata individualCaps, uint256[] calldata totalCaps) public onlyAdmin {\n        if(ids.length != prices.length || prices.length != individualCaps.length || individualCaps.length != totalCaps.length) revert InvalidTierInputs();\n        for (uint256 i = 0; i < ids.length; ) {\n            uint256 totalClaimed = whitelistTiers[ids[i]].totalClaimed;\n            whitelistTiers[ids[i]] = Tier(prices[i], individualCaps[i], totalClaimed, totalCaps[i]);\n            emit WhitelistTierSet(ids[i], prices[i], individualCaps[i], totalClaimed, totalCaps[i]);\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    /// @notice Sets partner tier details\n    /// @param partnerCodes The codes of the partners to configure the tiers for\n    /// @param ids The ids of the tiers to set\n    /// @param prices The prices of each tier to set\n    /// @param individualCaps The maximum amount of licenses that can be claimed per address for the tiers.\n    /// @param totalCaps The maximum amount of licenses that can be claimed in total for the tiers.\n    function setPartnerTiers(string[] calldata partnerCodes, uint256[] calldata ids, uint256[] calldata prices, uint256[] calldata individualCaps, uint256[] calldata totalCaps) public onlyAdmin {\n        if(partnerCodes.length != ids.length || ids.length != prices.length || prices.length != individualCaps.length || individualCaps.length != totalCaps.length) revert InvalidTierInputs();\n        for (uint256 i = 0; i < ids.length; ) {\n            uint256 totalClaimed = partnerTiers[partnerCodes[i]][ids[i]].totalClaimed;\n            partnerTiers[partnerCodes[i]][ids[i]] = Tier(prices[i], individualCaps[i], totalClaimed, totalCaps[i]);\n            emit PartnerTierSet(partnerCodes[i],ids[i], prices[i], individualCaps[i], totalClaimed, totalCaps[i]);\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    /// @notice Sets the team sale merkle root\n    /// @param _teamMerkleRoot The root of the team sale merkle tree\n    function setTeamMerkleRoot(bytes32 _teamMerkleRoot) public onlyMerkleManager {\n        teamMerkleRoot = _teamMerkleRoot;\n        emit TeamMerkleRootSet(_teamMerkleRoot);\n    }\n\n    /// @notice Sets the friends and family sale merkle root\n    /// @param _friendsFamilyMerkleRoot The root of the friends and family sale merkle tree\n    function setFriendsFamilyMerkleRoot(bytes32 _friendsFamilyMerkleRoot) public onlyMerkleManager {\n        friendsFamilyMerkleRoot = _friendsFamilyMerkleRoot;\n        emit FriendsFamilyMerkleRootSet(_friendsFamilyMerkleRoot);\n    }\n\n    /// @notice Sets the early access sale merkle root\n    /// @param _earlyAccessMerkleRoot The root of the early access sale merkle tree\n    function setEarlyAccessMerkleRoot(bytes32 _earlyAccessMerkleRoot) public onlyMerkleManager {\n        earlyAccessMerkleRoot = _earlyAccessMerkleRoot;\n        emit EarlyAccessMerkleRootSet(_earlyAccessMerkleRoot);\n    }\n\n    /// @notice Sets the public sale merkle root\n    /// @param _publicMerkleRoot The root of the public sale merkle tree\n    function setPublicMerkleRoot(bytes32 _publicMerkleRoot) public onlyMerkleManager {\n        publicMerkleRoot = _publicMerkleRoot;\n        emit PublicMerkleRootSet(_publicMerkleRoot);\n    }\n\n    /// @notice Sets the team sale status\n    /// @param status The status to set for the team sale\n    function setTeamSale(bool status) public onlyGuardian {\n        teamSaleActive = status;\n        emit TeamSaleStatusSet(status);\n    }\n\n    /// @notice Sets the friends and family sale status\n    /// @param status The status to set for the friends and family sale\n    function setFriendsFamilySale(bool status) public onlyGuardian {\n        friendsFamilySaleActive = status;\n        emit FriendsFamilySaleStatusSet(status);\n    }\n\n    /// @notice Sets the early access sale status\n    /// @param status The status to set for the early access sale\n    function setEarlyAccessSale(bool status) public onlyGuardian {\n        earlyAccessSaleActive = status;\n        emit EarlyAccessSaleStatusSet(status);\n    }\n\n    /// @notice Sets the partner sale status\n    /// @param partnerCode The code of the partner sale to set the status from\n    /// @param status The status to set for the partner sale\n    function setPartnerSale(string memory partnerCode, bool status) public onlyGuardian {\n        partnerSaleActive[partnerCode] = status;\n        emit PartnerSaleStatusSet(status, partnerCode);\n    }\n\n    /// @notice Sets the partner receiver address\n    /// @param partnerCode The code of the partner sale to set the status from\n    /// @param receiver The receiver address of the partner\n    function setPartnerReceiverAddress(string memory partnerCode, address receiver) public onlyAdmin {\n        partnerReferrals[partnerCode].receiver = receiver;\n        emit PartnerReceiverAddressSet(partnerCode, receiver);\n    }\n\n    /// @notice Sets the public sale status\n    /// @param status The status to set for the public sale\n    function setPublicSale(bool status) public onlyGuardian {\n        publicSaleActive = status;\n        emit PublicSaleStatusSet(status);\n    }\n\n    /// @notice Sets the public whitelist sale status\n    /// @param status The status to set for the public whitelist sale\n    function setPublicWhitelistSale(bool status) public onlyGuardian {\n        publicWhitelistSaleActive = status;\n        emit PublicWhitelistSaleStatusSet(status);\n    }\n\n    /// @notice Withdraws the sale proceeds\n    function withdrawProceeds() public onlyAdmin {\n        uint256 amount = address(this).balance;\n        (bool sent, ) = payable(msg.sender).call{ value: amount }(\"\");\n        if (!sent) revert WithdrawalFailed();\n        emit ProceedsWithdrawn(msg.sender, amount);\n    }\n\n    function _setReferral(string memory code, address receiver) internal {\n        if(referrals[code].receiver != address(0)) revert ReferralCodeInUse();\n        if(code.equal(\"\")) revert InvalidCode();\n        string memory oldReferralCode = receiverToReferralCode[receiver];\n        uint256 totalClaims = 0;\n        if(!oldReferralCode.equal(\"\")) {\n            totalClaims = referrals[receiverToReferralCode[receiver]].totalClaims;\n            delete referrals[receiverToReferralCode[receiver]];\n        }\n        referrals[code].receiver = receiver;\n        referrals[code].totalClaims = totalClaims;\n        receiverToReferralCode[receiver] = code;\n        emit ReferralUpdated(code, receiver);\n    }\n\n    modifier onlyAdmin() {\n        if (!hasRole(ADMIN_ROLE, msg.sender)) revert AccessDenied();\n        _;\n    }\n\n    modifier onlyMerkleManager() {\n        if (!hasRole(MERKLE_MANAGER_ROLE, msg.sender)) revert AccessDenied();\n        _;\n    }\n\n    modifier onlyReferralManager() {\n        if (!hasRole(REFERRAL_MANAGER_ROLE, msg.sender)) revert AccessDenied();\n        _;\n    }\n\n    modifier onlyGuardian() {\n        if (!hasRole(GUARDIAN_ROLE, msg.sender)) revert AccessDenied();\n        _;\n    }\n}\n"
    },
    "contracts/PreOrderLicenseClaimer.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.24;\n\nimport \"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\n\nimport \"./interfaces/IPreOrderLicenseClaimer.sol\";\nimport \"./interfaces/IPlayFiLicenseSale.sol\";\n\n/*\n\n                 .-+*###+-.\n               =*%%%%%%%%%%#=:\n               :=*%%%%%%%%%%%#+-.\n                   .-+#%%%%%%%%%%%*=:\n    :+##+-             :=#%%%%%%%%%%%#+-\n   *%%%%%%%*=:            .-+#%%%%%%%%%%*.\n  *%%%%%%%%#+:                :=#%%%%%%%%*\n  #%%%%%%*:         .==:         .*%%%%%%%\n  #%%%%%%=       :+#%%%%#+-       -%%%%#+:\n  #%%%%%%=     :#%%%%%%%%%%#-     -%*=.\n  #%%%%%%=     -%%%%%%%%%%%%=     .\n  #%%%%%%=     -%%%%%%%%%%%%=\n  #%%%%%%=     -%%%%%%%%%%%%=            :\n  #%%%%%%=      .=*%%%%%%*=:         .-+#%\n  #%%%%%%=          -++-.         :=#%%%%%\n  *%%%%%%=                    .-+#%%%%%%%#\n  .#%%%%%=                 :=*%%%%%%%%%%#:\n    =*%%%=       #+-.  .-+#%%%%%%%%%%%*=\n       -+=       #%%%##%%%%%%%%%%%#*-.\n                 #%%%%%%%%%%%%%#=:\n                 #%%%%%%%%%#*-.\n                 :=*%%%%#=:\n\n*/\n\n\n/// @title PlayFi License Claimer for Pre-Sales\n/// @author Archethect\n/// @notice Contract used to claim licenses for pre-orders\ncontract PreOrderLicenseClaimer is\nInitializable,\nAccessControlUpgradeable,\nIPreOrderLicenseClaimer\n{\n    bytes32 public constant ADMIN_ROLE = keccak256(\"ADMIN\");\n    bytes32 public constant EXECUTOR_ROLE = keccak256(\"EXECUTOR\");\n\n    IPlayFiLicenseSale public licenseSale;\n\n    /// @custom:oz-upgrades-unsafe-allow constructor\n    constructor() {\n        _disableInitializers();\n    }\n\n    function initialize(\n        address admin,\n        address executor,\n        address _licenseSale\n    ) public initializer {\n        __AccessControl_init();\n\n        if (admin == address(0)) revert InvalidAddress(admin);\n        if (executor == address(0)) revert InvalidAddress(executor);\n        if (_licenseSale == address(0)) revert InvalidAddress(_licenseSale);\n\n        _grantRole(ADMIN_ROLE, admin);\n        _setRoleAdmin(ADMIN_ROLE, ADMIN_ROLE);\n        _grantRole(EXECUTOR_ROLE, executor);\n        _grantRole(EXECUTOR_ROLE, admin);\n        _setRoleAdmin(EXECUTOR_ROLE, ADMIN_ROLE);\n\n        licenseSale = IPlayFiLicenseSale(_licenseSale);\n    }\n\n    /// @notice Claims pre-orders with the funds collected during the presale given the amounts per tier and the tiers\n    /// @param amounts The amounts of licenses to claim per tier\n    /// @param tiers The tiers to claim from\n    function claimPreOrders(uint256[] calldata amounts,uint256[] calldata tiers) public onlyExecutor {\n        if(amounts.length != tiers.length) revert InvalidLength();\n        for (uint256 i = 0; i < amounts.length; ) {\n            (uint256 toPay,,) = licenseSale.paymentDetailsForReferral(amounts[i],tiers[i],\"\",false);\n            licenseSale.claimLicensePublic{ value: toPay }(amounts[i],tiers[i],\"\");\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    /// @notice Withdraws the contract balance\n    function withdraw() public onlyAdmin {\n        uint256 amount = address(this).balance;\n        (bool sent, ) = payable(msg.sender).call{ value: amount }(\"\");\n        if (!sent) revert WithdrawalFailed();\n        emit Withdrawn(msg.sender, amount);\n    }\n\n    receive() external payable {\n        emit Received(msg.sender, msg.value);\n    }\n\n    modifier onlyAdmin() {\n        if (!hasRole(ADMIN_ROLE, msg.sender)) revert AccessDenied();\n        _;\n    }\n\n    modifier onlyExecutor() {\n        if (!hasRole(EXECUTOR_ROLE, msg.sender)) revert AccessDenied();\n        _;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 9999
    },
    "evmVersion": "paris",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "storageLayout",
          "devdoc",
          "userdoc",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}