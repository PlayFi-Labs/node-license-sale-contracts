{
  "address": "0x20E5B7792f646077bEF362b678E8B4d5Cb08FaC1",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AccessDenied",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CommissionPayoutFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "EarlyAccessSaleNotActive",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FriendsFamilySaleNotActive",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "IndividualClaimCapExceeded",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "IndividualTierCapExceeded",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InsufficientPayment",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "InvalidAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidCommission",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidDiscount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidProof",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidTierInputs",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PartnerSaleNotActive",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PublicSaleNotActive",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TeamSaleNotActive",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TotalTierCapExceeded",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "WithdrawalFailed",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "code",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "CommissionPaid",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "ContractInitialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "paid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "EarlyAccessLicensesClaimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "merkleRoot",
          "type": "bytes32"
        }
      ],
      "name": "EarlyAccessMerkleRootSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "status",
          "type": "bool"
        }
      ],
      "name": "EarlyAccessSaleStatusSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "paid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "FriendsFamilyLicensesClaimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "merkleRoot",
          "type": "bytes32"
        }
      ],
      "name": "FriendsFamilyMerkleRootSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "status",
          "type": "bool"
        }
      ],
      "name": "FriendsFamilySaleStatusSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tier",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "paid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "partnerCode",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "referral",
          "type": "string"
        }
      ],
      "name": "PartnerLicensesClaimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "merkleRoot",
          "type": "bytes32"
        }
      ],
      "name": "PartnerMerkleRootSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "status",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "partnerCode",
          "type": "string"
        }
      ],
      "name": "PartnerSaleStatusSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "partnerCode",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tierId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "individualCap",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalClaimed",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalCap",
          "type": "uint256"
        }
      ],
      "name": "PartnerTierSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "ProceedsWithdrawn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tier",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "paid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "referral",
          "type": "string"
        }
      ],
      "name": "PublicLicensesClaimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "merkleRoot",
          "type": "bytes32"
        }
      ],
      "name": "PublicMerkleRootSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "status",
          "type": "bool"
        }
      ],
      "name": "PublicSaleStatusSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tier",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "paid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "referral",
          "type": "string"
        }
      ],
      "name": "PublicWhitelistLicensesClaimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "code",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "commission",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "discount",
          "type": "uint256"
        }
      ],
      "name": "ReferralUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "TeamLicensesClaimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "merkleRoot",
          "type": "bytes32"
        }
      ],
      "name": "TeamMerkleRootSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "status",
          "type": "bool"
        }
      ],
      "name": "TeamSaleStatusSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tierId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "individualCap",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalClaimed",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalCap",
          "type": "uint256"
        }
      ],
      "name": "TierSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tierId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "individualCap",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalClaimed",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalCap",
          "type": "uint256"
        }
      ],
      "name": "WhitelistTierSet",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "GUARDIAN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MERKLE_MANAGER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "REFERRAL_MANAGER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        },
        {
          "internalType": "bytes32[]",
          "name": "merkleProof",
          "type": "bytes32[]"
        }
      ],
      "name": "claimLicenseEarlyAccess",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        },
        {
          "internalType": "bytes32[]",
          "name": "merkleProof",
          "type": "bytes32[]"
        }
      ],
      "name": "claimLicenseFriendsFamily",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tier",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "partnerCode",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "referral",
          "type": "string"
        }
      ],
      "name": "claimLicensePartner",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tier",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "referral",
          "type": "string"
        }
      ],
      "name": "claimLicensePublic",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tier",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        },
        {
          "internalType": "bytes32[]",
          "name": "merkleProof",
          "type": "bytes32[]"
        }
      ],
      "name": "claimLicensePublicWhitelist",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        },
        {
          "internalType": "bytes32[]",
          "name": "merkleProof",
          "type": "bytes32[]"
        }
      ],
      "name": "claimLicenseTeam",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "claimsPerTierPerAddress",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "earlyAccessClaimsPerAddress",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "earlyAccessMerkleRoot",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "earlyAccessSaleActive",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "friendsFamilyClaimsPerAddress",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "friendsFamilyMerkleRoot",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "friendsFamilySaleActive",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "partnerCode",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "getPartnerTier",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "individualCap",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalClaimed",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalCap",
              "type": "uint256"
            }
          ],
          "internalType": "struct IPlayFiLicenseSale.Tier",
          "name": "tier",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "id",
          "type": "string"
        }
      ],
      "name": "getReferral",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "discountPercentage",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "commissionPercentage",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "receiver",
              "type": "address"
            }
          ],
          "internalType": "struct IPlayFiLicenseSale.Referral",
          "name": "referral",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isWhitelist",
          "type": "bool"
        }
      ],
      "name": "getTier",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "individualCap",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalClaimed",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalCap",
              "type": "uint256"
            }
          ],
          "internalType": "struct IPlayFiLicenseSale.Tier",
          "name": "tier",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "admin",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "guardian",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "merkleManager",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "referralManager",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "partnerClaimsPerAddress",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "partnerClaimsPerTierPerAddress",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "partnerSaleActive",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "partnerTiers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "individualCap",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalClaimed",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalCap",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tier",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "partnerCode",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "referral",
          "type": "string"
        }
      ],
      "name": "paymentDetailsForPartnerReferral",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "toPay",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "commission",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "discount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tier",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "referral",
          "type": "string"
        },
        {
          "internalType": "bool",
          "name": "isWhitelist",
          "type": "bool"
        }
      ],
      "name": "paymentDetailsForReferral",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "toPay",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "commission",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "discount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "publicClaimsPerAddress",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "publicMerkleRoot",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "publicSaleActive",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "publicWhitelistClaimsPerAddressAndReferral",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "referrals",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "discountPercentage",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "commissionPercentage",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_earlyAccessMerkleRoot",
          "type": "bytes32"
        }
      ],
      "name": "setEarlyAccessMerkleRoot",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "status",
          "type": "bool"
        }
      ],
      "name": "setEarlyAccessSale",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_friendsFamilyMerkleRoot",
          "type": "bytes32"
        }
      ],
      "name": "setFriendsFamilyMerkleRoot",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "status",
          "type": "bool"
        }
      ],
      "name": "setFriendsFamilySale",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "partnerCode",
          "type": "string"
        },
        {
          "internalType": "bool",
          "name": "status",
          "type": "bool"
        }
      ],
      "name": "setPartnerSale",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string[]",
          "name": "partnerCodes",
          "type": "string[]"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "prices",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "individualCaps",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "totalCaps",
          "type": "uint256[]"
        }
      ],
      "name": "setPartnerTiers",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_publicMerkleRoot",
          "type": "bytes32"
        }
      ],
      "name": "setPublicMerkleRoot",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "status",
          "type": "bool"
        }
      ],
      "name": "setPublicSale",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "code",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "commission",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "discount",
          "type": "uint256"
        }
      ],
      "name": "setReferral",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_teamMerkleRoot",
          "type": "bytes32"
        }
      ],
      "name": "setTeamMerkleRoot",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "status",
          "type": "bool"
        }
      ],
      "name": "setTeamSale",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "prices",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "individualCaps",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "totalCaps",
          "type": "uint256[]"
        }
      ],
      "name": "setTiers",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "prices",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "individualCaps",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "totalCaps",
          "type": "uint256[]"
        }
      ],
      "name": "setWhitelistTiers",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "standardCommissionPercentage",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "standardDiscountPercentage",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "teamClaimsPerAddress",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "teamMerkleRoot",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "teamSaleActive",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tiers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "individualCap",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalClaimed",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalCap",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalLicenses",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "whitelistTiers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "individualCap",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalClaimed",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalCap",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawProceeds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x6348ee2612c0cee58faa2ff98d27dc2d08fa0e7d2e9cdfd542178f3d04bccf38",
  "receipt": {
    "to": null,
    "from": "0x96B71AD6b177B9CA96AC7d9b25088F0A956Fa25A",
    "contractAddress": "0x20E5B7792f646077bEF362b678E8B4d5Cb08FaC1",
    "transactionIndex": 1,
    "gasUsed": "7195705",
    "logsBloom": "0x
    "blockHash": "0xa4fc7c16efa2204578c2f3d4acd6cc2743f77ee14f574f1836c148d4f4dc876a",
    "transactionHash": "0x6348ee2612c0cee58faa2ff98d27dc2d08fa0e7d2e9cdfd542178f3d04bccf38",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 44050862,
        "transactionHash": "0x6348ee2612c0cee58faa2ff98d27dc2d08fa0e7d2e9cdfd542178f3d04bccf38",
        "address": "0x20E5B7792f646077bEF362b678E8B4d5Cb08FaC1",
        "topics": [
          "0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000ff",
        "logIndex": 0,
        "blockHash": "0xa4fc7c16efa2204578c2f3d4acd6cc2743f77ee14f574f1836c148d4f4dc876a"
      }
    ],
    "blockNumber": 44050862,
    "cumulativeGasUsed": "7195705",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "2aefcc55772867f695238b2b05633522",
  "metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AccessDenied\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CommissionPayoutFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EarlyAccessSaleNotActive\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FriendsFamilySaleNotActive\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"IndividualClaimCapExceeded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"IndividualTierCapExceeded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientPayment\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"InvalidAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidCommission\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidDiscount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidProof\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidTierInputs\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PartnerSaleNotActive\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PublicSaleNotActive\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TeamSaleNotActive\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TotalTierCapExceeded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WithdrawalFailed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"code\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"CommissionPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"ContractInitialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"paid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EarlyAccessLicensesClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"}],\"name\":\"EarlyAccessMerkleRootSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"EarlyAccessSaleStatusSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"paid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FriendsFamilyLicensesClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"}],\"name\":\"FriendsFamilyMerkleRootSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"FriendsFamilySaleStatusSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tier\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"paid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"partnerCode\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"referral\",\"type\":\"string\"}],\"name\":\"PartnerLicensesClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"}],\"name\":\"PartnerMerkleRootSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"partnerCode\",\"type\":\"string\"}],\"name\":\"PartnerSaleStatusSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"partnerCode\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tierId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"individualCap\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalClaimed\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalCap\",\"type\":\"uint256\"}],\"name\":\"PartnerTierSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ProceedsWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tier\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"paid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"referral\",\"type\":\"string\"}],\"name\":\"PublicLicensesClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"}],\"name\":\"PublicMerkleRootSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"PublicSaleStatusSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tier\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"paid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"referral\",\"type\":\"string\"}],\"name\":\"PublicWhitelistLicensesClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"code\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"commission\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"discount\",\"type\":\"uint256\"}],\"name\":\"ReferralUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TeamLicensesClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"}],\"name\":\"TeamMerkleRootSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"TeamSaleStatusSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tierId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"individualCap\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalClaimed\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalCap\",\"type\":\"uint256\"}],\"name\":\"TierSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tierId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"individualCap\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalClaimed\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalCap\",\"type\":\"uint256\"}],\"name\":\"WhitelistTierSet\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GUARDIAN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MERKLE_MANAGER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REFERRAL_MANAGER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"bytes32[]\",\"name\":\"merkleProof\",\"type\":\"bytes32[]\"}],\"name\":\"claimLicenseEarlyAccess\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"bytes32[]\",\"name\":\"merkleProof\",\"type\":\"bytes32[]\"}],\"name\":\"claimLicenseFriendsFamily\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tier\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"partnerCode\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"referral\",\"type\":\"string\"}],\"name\":\"claimLicensePartner\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tier\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"referral\",\"type\":\"string\"}],\"name\":\"claimLicensePublic\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tier\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"bytes32[]\",\"name\":\"merkleProof\",\"type\":\"bytes32[]\"}],\"name\":\"claimLicensePublicWhitelist\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"bytes32[]\",\"name\":\"merkleProof\",\"type\":\"bytes32[]\"}],\"name\":\"claimLicenseTeam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimsPerTierPerAddress\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"earlyAccessClaimsPerAddress\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"earlyAccessMerkleRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"earlyAccessSaleActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"friendsFamilyClaimsPerAddress\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"friendsFamilyMerkleRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"friendsFamilySaleActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"partnerCode\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getPartnerTier\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"individualCap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalClaimed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalCap\",\"type\":\"uint256\"}],\"internalType\":\"struct IPlayFiLicenseSale.Tier\",\"name\":\"tier\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"id\",\"type\":\"string\"}],\"name\":\"getReferral\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"discountPercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"commissionPercentage\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"internalType\":\"struct IPlayFiLicenseSale.Referral\",\"name\":\"referral\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isWhitelist\",\"type\":\"bool\"}],\"name\":\"getTier\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"individualCap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalClaimed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalCap\",\"type\":\"uint256\"}],\"internalType\":\"struct IPlayFiLicenseSale.Tier\",\"name\":\"tier\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"guardian\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"merkleManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"referralManager\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"partnerClaimsPerAddress\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"partnerClaimsPerTierPerAddress\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"partnerSaleActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"partnerTiers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"individualCap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalClaimed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalCap\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tier\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"partnerCode\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"referral\",\"type\":\"string\"}],\"name\":\"paymentDetailsForPartnerReferral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"toPay\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"commission\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"discount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tier\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"referral\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"isWhitelist\",\"type\":\"bool\"}],\"name\":\"paymentDetailsForReferral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"toPay\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"commission\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"discount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"publicClaimsPerAddress\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"publicMerkleRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"publicSaleActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"publicWhitelistClaimsPerAddressAndReferral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"referrals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"discountPercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"commissionPercentage\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_earlyAccessMerkleRoot\",\"type\":\"bytes32\"}],\"name\":\"setEarlyAccessMerkleRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"setEarlyAccessSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_friendsFamilyMerkleRoot\",\"type\":\"bytes32\"}],\"name\":\"setFriendsFamilyMerkleRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"setFriendsFamilySale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"partnerCode\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"setPartnerSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"partnerCodes\",\"type\":\"string[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"prices\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"individualCaps\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"totalCaps\",\"type\":\"uint256[]\"}],\"name\":\"setPartnerTiers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_publicMerkleRoot\",\"type\":\"bytes32\"}],\"name\":\"setPublicMerkleRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"setPublicSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"code\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"commission\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"discount\",\"type\":\"uint256\"}],\"name\":\"setReferral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_teamMerkleRoot\",\"type\":\"bytes32\"}],\"name\":\"setTeamMerkleRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"setTeamSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"prices\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"individualCaps\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"totalCaps\",\"type\":\"uint256[]\"}],\"name\":\"setTiers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"prices\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"individualCaps\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"totalCaps\",\"type\":\"uint256[]\"}],\"name\":\"setWhitelistTiers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"standardCommissionPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"standardDiscountPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"teamClaimsPerAddress\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamMerkleRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamSaleActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tiers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"individualCap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalClaimed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalCap\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalLicenses\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"whitelistTiers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"individualCap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalClaimed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalCap\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawProceeds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Archethect\",\"events\":{\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"}},\"kind\":\"dev\",\"methods\":{\"claimLicenseEarlyAccess(uint256,bytes,bytes32[])\":{\"params\":{\"amount\":\"The amount of licenses to claim\",\"data\":\"Index and claimCap in encoded format\",\"merkleProof\":\"The proof used to verify whether the caller is allowed to claim the licenses\"}},\"claimLicenseFriendsFamily(uint256,bytes,bytes32[])\":{\"params\":{\"amount\":\"The amount of licenses to claim\",\"data\":\"Index and claimCap in encoded format\",\"merkleProof\":\"The proof used to verify weather the caller is allowed to claim the licenses\"}},\"claimLicensePartner(uint256,uint256,string,string)\":{\"params\":{\"amount\":\"The amount of licenses to claim\",\"partnerCode\":\"The code of the partner sale\",\"referral\":\"A referral code that can give discounts.\"}},\"claimLicensePublic(uint256,uint256,string)\":{\"params\":{\"amount\":\"The amount of licenses to claim\",\"referral\":\"A referral code that can give discounts.\",\"tier\":\"The tier to buy the licenses from\"}},\"claimLicensePublicWhitelist(uint256,uint256,bytes,bytes32[])\":{\"params\":{\"amount\":\"The amount of licenses to claim\",\"data\":\"Index, claimCap and referral in encoded format\",\"merkleProof\":\"The proof used to verify weather the caller is allowed to claim the licenses\",\"tier\":\"The tier to buy the licenses from\"}},\"claimLicenseTeam(uint256,bytes,bytes32[])\":{\"params\":{\"amount\":\"The amount of licenses to claim\",\"data\":\"Index and claimCap in encoded format\",\"merkleProof\":\"The proof used to verify whether the caller is allowed to claim the licenses\"}},\"constructor\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor\"},\"getPartnerTier(string,uint256)\":{\"params\":{\"id\":\"The tier id\",\"partnerCode\":\"The code of the partner to return the tier from\"},\"returns\":{\"tier\":\"The tier\"}},\"getReferral(string)\":{\"params\":{\"id\":\"The referral id\"},\"returns\":{\"referral\":\"The referral\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getTier(uint256,bool)\":{\"params\":{\"id\":\"The tier id\",\"isWhitelist\":\"Whether the tier is used for the whitelist sale or not\"},\"returns\":{\"tier\":\"The tier\"}},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"paymentDetailsForPartnerReferral(uint256,uint256,string,string)\":{\"params\":{\"amount\":\"The amount of licenses to claim\",\"partnerCode\":\"The code identifying the partner sale\",\"referral\":\"A referral code that can give discounts.\",\"tier\":\"The tier to buy the licenses from\"},\"returns\":{\"commission\":\"The commission in ETH that the referrer will get.\",\"discount\":\"The discount in ETH the claimer will get\",\"toPay\":\"The amount of ETH that should be paid by the claimer.\"}},\"paymentDetailsForReferral(uint256,uint256,string,bool)\":{\"params\":{\"amount\":\"The amount of licenses to claim\",\"isWhitelist\":\"Whether the tier is used for the whitelist sale or not\",\"referral\":\"A referral code that can give discounts.\",\"tier\":\"The tier to buy the licenses from\"},\"returns\":{\"commission\":\"The commission in ETH that the referrer will get.\",\"discount\":\"The discount in ETH the claimer will get\",\"toPay\":\"The amount of ETH that should be paid by the claimer.\"}},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"setEarlyAccessMerkleRoot(bytes32)\":{\"params\":{\"_earlyAccessMerkleRoot\":\"The root of the early access sale merkle tree\"}},\"setEarlyAccessSale(bool)\":{\"params\":{\"status\":\"The status to set for the early access sale\"}},\"setFriendsFamilyMerkleRoot(bytes32)\":{\"params\":{\"_friendsFamilyMerkleRoot\":\"The root of the friends and family sale merkle tree\"}},\"setFriendsFamilySale(bool)\":{\"params\":{\"status\":\"The status to set for the friends and family sale\"}},\"setPartnerSale(string,bool)\":{\"params\":{\"partnerCode\":\"The code of the partner sale to set the status from\",\"status\":\"The status to set for the partner sale\"}},\"setPartnerTiers(string[],uint256[],uint256[],uint256[],uint256[])\":{\"params\":{\"ids\":\"The ids of the tiers to set\",\"individualCaps\":\"The maximum amount of licenses that can be claimed per address for the tiers.\",\"partnerCodes\":\"The codes of the partners to configure the tiers for\",\"prices\":\"The prices of each tier to set\",\"totalCaps\":\"The maximum amount of licenses that can be claimed in total for the tiers.\"}},\"setPublicMerkleRoot(bytes32)\":{\"params\":{\"_publicMerkleRoot\":\"The root of the public sale merkle tree\"}},\"setPublicSale(bool)\":{\"params\":{\"status\":\"The status to set for the public sale\"}},\"setReferral(string,address,uint256,uint256)\":{\"params\":{\"code\":\"The referral code to be used when claiming\",\"commission\":\"The percentage of the total price to be used as a commission\",\"discount\":\"The percentage of the total price to be used as a discount\",\"receiver\":\"The receiver address for the commissions\"}},\"setTeamMerkleRoot(bytes32)\":{\"params\":{\"_teamMerkleRoot\":\"The root of the team sale merkle tree\"}},\"setTeamSale(bool)\":{\"params\":{\"status\":\"The status to set for the team sale\"}},\"setTiers(uint256[],uint256[],uint256[],uint256[])\":{\"params\":{\"ids\":\"The ids of the tiers to set\",\"individualCaps\":\"The maximum amount of licenses that can be claimed per address for the tiers.\",\"prices\":\"The prices of each tier to set\",\"totalCaps\":\"The maximum amount of licenses that can be claimed in total for the tiers.\"}},\"setWhitelistTiers(uint256[],uint256[],uint256[],uint256[])\":{\"params\":{\"ids\":\"The ids of the tiers to set\",\"individualCaps\":\"The maximum amount of licenses that can be claimed per address for the tiers.\",\"prices\":\"The prices of each tier to set\",\"totalCaps\":\"The maximum amount of licenses that can be claimed in total for the tiers.\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"title\":\"PlayFi node license sale contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"claimLicenseEarlyAccess(uint256,bytes,bytes32[])\":{\"notice\":\"Claims licenses for early access addresses + make sure they do not exceed their personal claim cap and that they paid enough.\"},\"claimLicenseFriendsFamily(uint256,bytes,bytes32[])\":{\"notice\":\"Claims licenses for friends and family + make sure they do not exceed their personal claim cap and that they paid enough.\"},\"claimLicensePartner(uint256,uint256,string,string)\":{\"notice\":\"Claims licenses for partners + make sure they do not exceed their personal claim cap and that they paid enough.\"},\"claimLicensePublic(uint256,uint256,string)\":{\"notice\":\"Claims licenses for the public in a specific tier + make sure they do not exceed their personal claim cap and total tier cap. Additionally also make sure that they paid enough.\"},\"claimLicensePublicWhitelist(uint256,uint256,bytes,bytes32[])\":{\"notice\":\"Claims licenses for whitelisted addresses during the public sale + make sure they do not exceed their personal claim cap and that they paid enough.\"},\"claimLicenseTeam(uint256,bytes,bytes32[])\":{\"notice\":\"Claims licenses for team members and make sure they do not exceed their personal claim cap.\"},\"getPartnerTier(string,uint256)\":{\"notice\":\"Returns partner tier details provided a partner code and tier id\"},\"getReferral(string)\":{\"notice\":\"Returns referral details provided a referral id\"},\"getTier(uint256,bool)\":{\"notice\":\"Returns tier details provided a tier id\"},\"paymentDetailsForPartnerReferral(uint256,uint256,string,string)\":{\"notice\":\"Calculates the price, commission and discount for X number of licenses in partner tier Y given referral code Z and partnerCod W\"},\"paymentDetailsForReferral(uint256,uint256,string,bool)\":{\"notice\":\"Calculates the price, commission and discount for X number of licenses in tier Y given referral code Z\"},\"setEarlyAccessMerkleRoot(bytes32)\":{\"notice\":\"Sets the early access sale merkle root\"},\"setEarlyAccessSale(bool)\":{\"notice\":\"Sets the early access sale status\"},\"setFriendsFamilyMerkleRoot(bytes32)\":{\"notice\":\"Sets the friends and family sale merkle root\"},\"setFriendsFamilySale(bool)\":{\"notice\":\"Sets the friends and family sale status\"},\"setPartnerSale(string,bool)\":{\"notice\":\"Sets the partner sale status\"},\"setPartnerTiers(string[],uint256[],uint256[],uint256[],uint256[])\":{\"notice\":\"Sets partner tier details\"},\"setPublicMerkleRoot(bytes32)\":{\"notice\":\"Sets the public sale merkle root\"},\"setPublicSale(bool)\":{\"notice\":\"Sets the public sale status\"},\"setReferral(string,address,uint256,uint256)\":{\"notice\":\"Sets referral details\"},\"setTeamMerkleRoot(bytes32)\":{\"notice\":\"Sets the team sale merkle root\"},\"setTeamSale(bool)\":{\"notice\":\"Sets the team sale status\"},\"setTiers(uint256[],uint256[],uint256[],uint256[])\":{\"notice\":\"Sets tier details\"},\"setWhitelistTiers(uint256[],uint256[],uint256[],uint256[])\":{\"notice\":\"Sets whitelist tier details\"},\"withdrawProceeds()\":{\"notice\":\"Withdraws the sale proceeds\"}},\"notice\":\"Contract used to handle whitelist and public node license sales in several tiers.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/PlayFiLicenseSale.sol\":\"PlayFiLicenseSale\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":9999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xc8710577334e8d0799ae2b2a731b1924a7bddd64319da9787ddd2dc69bdd1ce5\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x75097e35253e7fb282ee4d7f27a80eaacfa759923185bf17302a89cbc059c5ef\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/MathUpgradeable.sol\\\";\\nimport \\\"./math/SignedMathUpgradeable.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = MathUpgradeable.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMathUpgradeable.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0xb96dc79b65b7c37937919dcdb356a969ce0aa2e8338322bf4dc027a3c9c9a7eb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport {Initializable} from \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xd90d7723512df65ae417adaf0801042940f0dabd60039ceeaffe34aa5b238da1\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2bc0007987c229ae7624eb29be6a9b84f6a6a5872f76248b15208b131ea41c4e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/SignedMathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMathUpgradeable {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x88f6b7bba3ee33eeb741f9a0f5bc98b6e6e352d0fe4905377bb328590f84095a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.2) (utils/cryptography/MerkleProof.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Tree proofs.\\n *\\n * The tree and the proofs can be generated using our\\n * https://github.com/OpenZeppelin/merkle-tree[JavaScript library].\\n * You will find a quickstart guide in the readme.\\n *\\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\\n * hashing, or use a hash function other than keccak256 for hashing leaves.\\n * This is because the concatenation of a sorted pair of internal nodes in\\n * the merkle tree could be reinterpreted as a leaf value.\\n * OpenZeppelin's JavaScript library generates merkle trees that are safe\\n * against this attack out of the box.\\n */\\nlibrary MerkleProof {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(bytes32[] memory proof, bytes32 root, bytes32 leaf) internal pure returns (bool) {\\n        return processProof(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {verify}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function verifyCalldata(bytes32[] calldata proof, bytes32 root, bytes32 leaf) internal pure returns (bool) {\\n        return processProofCalldata(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. When processing the proof, the pairs\\n     * of leafs & pre-images are assumed to be sorted.\\n     *\\n     * _Available since v4.4._\\n     */\\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processProof}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processProofCalldata(bytes32[] calldata proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Returns true if the `leaves` can be simultaneously proven to be a part of a merkle tree defined by\\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function multiProofVerify(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProof(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {multiProofVerify}\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function multiProofVerifyCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProofCalldata(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\\n     * proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\\n     * leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\\n     * respectively.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\\n     * is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\\n     * tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processMultiProof(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuilds the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 proofLen = proof.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        require(leavesLen + proofLen - 1 == totalHashes, \\\"MerkleProof: invalid multiproof\\\");\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value from the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i]\\n                ? (leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++])\\n                : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            require(proofPos == proofLen, \\\"MerkleProof: invalid multiproof\\\");\\n            unchecked {\\n                return hashes[totalHashes - 1];\\n            }\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processMultiProof}.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processMultiProofCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuilds the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 proofLen = proof.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        require(leavesLen + proofLen - 1 == totalHashes, \\\"MerkleProof: invalid multiproof\\\");\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value from the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i]\\n                ? (leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++])\\n                : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            require(proofPos == proofLen, \\\"MerkleProof: invalid multiproof\\\");\\n            unchecked {\\n                return hashes[totalHashes - 1];\\n            }\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    function _hashPair(bytes32 a, bytes32 b) private pure returns (bytes32) {\\n        return a < b ? _efficientHash(a, b) : _efficientHash(b, a);\\n    }\\n\\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, a)\\n            mstore(0x20, b)\\n            value := keccak256(0x00, 0x40)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xcf688741f79f4838d5301dcf72d0af9eff11bbab6ab0bb112ad144c7fb672dac\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"contracts/PlayFiLicenseSale.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.24;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\nimport \\\"./interfaces/IPlayFiLicenseSale.sol\\\";\\n\\n/*\\n\\n                 .-+*###+-.\\n               =*%%%%%%%%%%#=:\\n               :=*%%%%%%%%%%%#+-.\\n                   .-+#%%%%%%%%%%%*=:\\n    :+##+-             :=#%%%%%%%%%%%#+-\\n   *%%%%%%%*=:            .-+#%%%%%%%%%%*.\\n  *%%%%%%%%#+:                :=#%%%%%%%%*\\n  #%%%%%%*:         .==:         .*%%%%%%%\\n  #%%%%%%=       :+#%%%%#+-       -%%%%#+:\\n  #%%%%%%=     :#%%%%%%%%%%#-     -%*=.\\n  #%%%%%%=     -%%%%%%%%%%%%=     .\\n  #%%%%%%=     -%%%%%%%%%%%%=\\n  #%%%%%%=     -%%%%%%%%%%%%=            :\\n  #%%%%%%=      .=*%%%%%%*=:         .-+#%\\n  #%%%%%%=          -++-.         :=#%%%%%\\n  *%%%%%%=                    .-+#%%%%%%%#\\n  .#%%%%%=                 :=*%%%%%%%%%%#:\\n    =*%%%=       #+-.  .-+#%%%%%%%%%%%*=\\n       -+=       #%%%##%%%%%%%%%%%#*-.\\n                 #%%%%%%%%%%%%%#=:\\n                 #%%%%%%%%%#*-.\\n                 :=*%%%%#=:\\n\\n*/\\n\\n\\n/// @title PlayFi node license sale contract\\n/// @author Archethect\\n/// @notice Contract used to handle whitelist and public node license sales in several tiers.\\ncontract PlayFiLicenseSale is\\nInitializable,\\nAccessControlUpgradeable,\\nIPlayFiLicenseSale\\n{\\n    bytes32 public constant ADMIN_ROLE = keccak256(\\\"ADMIN\\\");\\n    bytes32 public constant GUARDIAN_ROLE = keccak256(\\\"GUARDIAN\\\");\\n    bytes32 public constant MERKLE_MANAGER_ROLE = keccak256(\\\"MERKLE_MANAGER\\\");\\n    bytes32 public constant REFERRAL_MANAGER_ROLE = keccak256(\\\"REFERRAL_MANAGER\\\");\\n\\n    bytes32 public override teamMerkleRoot;\\n    bytes32 public override friendsFamilyMerkleRoot;\\n    bytes32 public override earlyAccessMerkleRoot;\\n    bytes32 public override publicMerkleRoot;\\n\\n    bool public override teamSaleActive;\\n    bool public override friendsFamilySaleActive;\\n    bool public override earlyAccessSaleActive;\\n    bool public override publicSaleActive;\\n\\n    uint256 public override standardCommissionPercentage;\\n    uint256 public override standardDiscountPercentage;\\n    uint256 public override totalLicenses;\\n\\n    mapping(address => uint256) public teamClaimsPerAddress;\\n    mapping(address => uint256) public friendsFamilyClaimsPerAddress;\\n    mapping(address => uint256) public earlyAccessClaimsPerAddress;\\n    mapping(string => mapping(address => uint256)) public partnerClaimsPerAddress;\\n    mapping(address => uint256) public publicClaimsPerAddress;\\n    mapping(address => mapping(string => uint256)) public publicWhitelistClaimsPerAddressAndReferral;\\n\\n    mapping(uint256 => Tier) public tiers;\\n    mapping(uint256 => Tier) public whitelistTiers;\\n    mapping(string => mapping(uint256 => Tier)) public partnerTiers;\\n    mapping(string => Referral) public referrals;\\n    mapping(uint256 => mapping(address => uint256)) public claimsPerTierPerAddress;\\n    mapping(string => mapping(uint256 => mapping(address => uint256))) public partnerClaimsPerTierPerAddress;\\n    mapping(string => bool) public partnerSaleActive;\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    function initialize(\\n        address admin,\\n        address guardian,\\n        address merkleManager,\\n        address referralManager\\n    ) public initializer {\\n        __AccessControl_init();\\n\\n        if (admin == address(0)) revert InvalidAddress(admin);\\n        if (guardian == address(0)) revert InvalidAddress(guardian);\\n        if (merkleManager == address(0)) revert InvalidAddress(merkleManager);\\n        if (referralManager == address(0)) revert InvalidAddress(referralManager);\\n\\n        _grantRole(ADMIN_ROLE, admin);\\n        _setRoleAdmin(ADMIN_ROLE, ADMIN_ROLE);\\n        _grantRole(GUARDIAN_ROLE, guardian);\\n        _grantRole(GUARDIAN_ROLE, admin);\\n        _setRoleAdmin(GUARDIAN_ROLE, ADMIN_ROLE);\\n        _grantRole(MERKLE_MANAGER_ROLE, merkleManager);\\n        _setRoleAdmin(MERKLE_MANAGER_ROLE, ADMIN_ROLE);\\n        _grantRole(REFERRAL_MANAGER_ROLE, referralManager);\\n        _setRoleAdmin(REFERRAL_MANAGER_ROLE, ADMIN_ROLE);\\n\\n        standardCommissionPercentage = 5;\\n        standardDiscountPercentage = 5;\\n\\n        emit ContractInitialized();\\n    }\\n\\n    /// @notice Claims licenses for team members and make sure they do not exceed their personal claim cap.\\n    /// @param amount The amount of licenses to claim\\n    /// @param data Index and claimCap in encoded format\\n    /// @param merkleProof The proof used to verify whether the caller is allowed to claim the licenses\\n    function claimLicenseTeam(uint256 amount, bytes calldata data, bytes32[] calldata merkleProof) external {\\n        if(!teamSaleActive) revert TeamSaleNotActive();\\n        (uint256 index, uint256 claimCap) = abi.decode(data,(uint256,uint256));\\n        uint256 claimedLicenses = teamClaimsPerAddress[msg.sender];\\n        if(amount + claimedLicenses > claimCap) revert IndividualClaimCapExceeded();\\n        bytes32 node = keccak256(abi.encodePacked(index, msg.sender, claimCap));\\n        if (!MerkleProof.verify(merkleProof, teamMerkleRoot, node)) revert InvalidProof();\\n        teamClaimsPerAddress[msg.sender] += amount;\\n        totalLicenses += amount;\\n        emit TeamLicensesClaimed(msg.sender, amount);\\n    }\\n\\n    /// @notice Claims licenses for friends and family + make sure they do not exceed their personal claim cap and that\\n    /// they paid enough.\\n    /// @param amount The amount of licenses to claim\\n    /// @param data Index and claimCap in encoded format\\n    /// @param merkleProof The proof used to verify weather the caller is allowed to claim the licenses\\n    function claimLicenseFriendsFamily(uint256 amount, bytes calldata data, bytes32[] calldata merkleProof) external payable {\\n        if(!friendsFamilySaleActive) revert FriendsFamilySaleNotActive();\\n        (uint256 index, uint256 claimCap) = abi.decode(data,(uint256,uint256));\\n        uint256 claimedLicenses = friendsFamilyClaimsPerAddress[msg.sender];\\n        if(amount + claimedLicenses > claimCap) revert IndividualClaimCapExceeded();\\n        bytes32 node = keccak256(abi.encodePacked(index, msg.sender, claimCap));\\n        if (!MerkleProof.verify(merkleProof, friendsFamilyMerkleRoot, node)) revert InvalidProof();\\n        uint256 toPay = tiers[1].price * amount;\\n        if(msg.value < toPay) revert InsufficientPayment();\\n        friendsFamilyClaimsPerAddress[msg.sender] += amount;\\n        totalLicenses += amount;\\n        emit FriendsFamilyLicensesClaimed(msg.sender, toPay, amount);\\n    }\\n\\n    /// @notice Claims licenses for early access addresses + make sure they do not exceed their personal claim cap and\\n    /// that they paid enough.\\n    /// @param amount The amount of licenses to claim\\n    /// @param data Index and claimCap in encoded format\\n    /// @param merkleProof The proof used to verify whether the caller is allowed to claim the licenses\\n    function claimLicenseEarlyAccess(uint256 amount, bytes calldata data, bytes32[] calldata merkleProof) external payable {\\n        if(!earlyAccessSaleActive) revert EarlyAccessSaleNotActive();\\n        (uint256 index, uint256 claimCap) = abi.decode(data,(uint256,uint256));\\n        uint256 claimedLicenses = earlyAccessClaimsPerAddress[msg.sender];\\n        if(amount + claimedLicenses > claimCap) revert IndividualClaimCapExceeded();\\n        bytes32 node = keccak256(abi.encodePacked(index, msg.sender, claimCap));\\n        if (!MerkleProof.verify(merkleProof, earlyAccessMerkleRoot, node)) revert InvalidProof();\\n        uint256 toPay = tiers[1].price * amount;\\n        if(msg.value < toPay) revert InsufficientPayment();\\n        earlyAccessClaimsPerAddress[msg.sender] += amount;\\n        totalLicenses += amount;\\n        emit EarlyAccessLicensesClaimed(msg.sender, toPay, amount);\\n    }\\n\\n    /// @notice Claims licenses for partners + make sure they do not exceed their personal claim cap and that\\n    /// they paid enough.\\n    /// @param amount The amount of licenses to claim\\n    /// @param partnerCode The code of the partner sale\\n    /// @param referral A referral code that can give discounts.\\n    function claimLicensePartner(uint256 amount,  uint256 tier, string memory partnerCode, string memory referral) external payable {\\n        if(!partnerSaleActive[partnerCode]) revert PartnerSaleNotActive();\\n        if(partnerTiers[partnerCode][tier].totalClaimed + amount > partnerTiers[partnerCode][tier].totalCap) revert TotalTierCapExceeded();\\n        if(partnerClaimsPerTierPerAddress[partnerCode][tier][msg.sender] + amount > partnerTiers[partnerCode][tier].individualCap) revert IndividualTierCapExceeded();\\n        (uint256 toPay, uint256 commission,) = paymentDetailsForPartnerReferral(amount, tier, partnerCode, referral);\\n        if(msg.value < toPay) revert InsufficientPayment();\\n        if(commission > 0) {\\n            (bool sent, ) = payable(referrals[referral].receiver).call{ value: commission }(\\\"\\\");\\n            if (!sent) revert CommissionPayoutFailed();\\n            emit CommissionPaid(referral, referrals[referral].receiver, commission);\\n        }\\n        string memory addressAsString = Strings.toHexString(msg.sender);\\n        if(referrals[addressAsString].discountPercentage == 0) {\\n            _setReferral(addressAsString, msg.sender, standardCommissionPercentage, standardDiscountPercentage);\\n        }\\n        partnerTiers[partnerCode][tier].totalClaimed += amount;\\n        partnerClaimsPerAddress[partnerCode][msg.sender] += amount;\\n        totalLicenses += amount;\\n        emit PartnerLicensesClaimed(msg.sender, amount, tier, toPay, partnerCode, referral);\\n    }\\n\\n    /// @notice Claims licenses for the public in a specific tier + make sure they do not exceed their personal claim\\n    /// cap and total tier cap. Additionally also make sure that they paid enough.\\n    /// @param amount The amount of licenses to claim\\n    /// @param tier The tier to buy the licenses from\\n    /// @param referral A referral code that can give discounts.\\n    function claimLicensePublic(uint256 amount, uint256 tier, string memory referral) external payable {\\n        if(!publicSaleActive) revert PublicSaleNotActive();\\n        if(tiers[tier].totalClaimed + amount > tiers[tier].totalCap) revert TotalTierCapExceeded();\\n        if(claimsPerTierPerAddress[tier][msg.sender] + amount > tiers[tier].individualCap) revert IndividualTierCapExceeded();\\n        (uint256 toPay, uint256 commission,) = paymentDetailsForReferral(amount, tier, referral, false);\\n        if(msg.value < toPay) revert InsufficientPayment();\\n        if(commission > 0) {\\n            (bool sent, ) = payable(referrals[referral].receiver).call{ value: commission }(\\\"\\\");\\n            if (!sent) revert CommissionPayoutFailed();\\n            emit CommissionPaid(referral, referrals[referral].receiver, commission);\\n        }\\n        string memory addressAsString = Strings.toHexString(msg.sender);\\n        if(referrals[addressAsString].discountPercentage == 0) {\\n            _setReferral(addressAsString, msg.sender, standardCommissionPercentage, standardDiscountPercentage);\\n        }\\n        tiers[tier].totalClaimed += amount;\\n        publicClaimsPerAddress[msg.sender] += amount;\\n        totalLicenses += amount;\\n        emit PublicLicensesClaimed(msg.sender, amount, tier, toPay, referral);\\n    }\\n\\n    /// @notice Claims licenses for whitelisted addresses during the public sale + make sure they do not exceed their personal claim cap and that\\n    /// they paid enough.\\n    /// @param amount The amount of licenses to claim\\n    /// @param tier The tier to buy the licenses from\\n    /// @param data Index, claimCap and referral in encoded format\\n    /// @param merkleProof The proof used to verify weather the caller is allowed to claim the licenses\\n    function claimLicensePublicWhitelist(uint256 amount, uint256 tier, bytes calldata data, bytes32[] calldata merkleProof) external payable {\\n        if(!publicSaleActive) revert PublicSaleNotActive();\\n        (uint256 index, uint256 claimCap, string memory referral) = abi.decode(data,(uint256,uint256,string));\\n        if(whitelistTiers[tier].totalClaimed + amount > whitelistTiers[tier].totalCap) revert TotalTierCapExceeded();\\n        uint256 claimedLicenses = publicWhitelistClaimsPerAddressAndReferral[msg.sender][referral];\\n        if(amount + claimedLicenses > claimCap) revert IndividualClaimCapExceeded();\\n        {\\n            bytes32 node = keccak256(abi.encodePacked(index, msg.sender, claimCap, referral));\\n            if (!MerkleProof.verify(merkleProof, publicMerkleRoot, node)) revert InvalidProof();\\n        }\\n        (uint256 toPay, uint256 commission,) = paymentDetailsForReferral(amount, tier, referral, true);\\n        if(msg.value < toPay) revert InsufficientPayment();\\n        if(commission > 0) {\\n            (bool sent, ) = payable(referrals[referral].receiver).call{ value: commission }(\\\"\\\");\\n            if (!sent) revert CommissionPayoutFailed();\\n            emit CommissionPaid(referral, referrals[referral].receiver, commission);\\n        }\\n        string memory addressAsString = Strings.toHexString(msg.sender);\\n        if(referrals[addressAsString].discountPercentage == 0) {\\n            _setReferral(addressAsString, msg.sender, standardCommissionPercentage, standardDiscountPercentage);\\n        }\\n        whitelistTiers[tier].totalClaimed += amount;\\n        publicWhitelistClaimsPerAddressAndReferral[msg.sender][referral] += amount;\\n        totalLicenses += amount;\\n        emit PublicWhitelistLicensesClaimed(msg.sender, amount, tier, toPay, referral);\\n    }\\n\\n    /// @notice Calculates the price, commission and discount for X number of licenses in tier Y given referral code Z\\n    /// @param amount The amount of licenses to claim\\n    /// @param tier The tier to buy the licenses from\\n    /// @param referral A referral code that can give discounts.\\n    /// @param isWhitelist Whether the tier is used for the whitelist sale or not\\n    /// @return toPay The amount of ETH that should be paid by the claimer.\\n    /// @return commission The commission in ETH that the referrer will get.\\n    /// @return discount The discount in ETH the claimer will get\\n    function paymentDetailsForReferral(uint256 amount, uint256 tier, string memory referral, bool isWhitelist) public view returns (uint256 toPay, uint256 commission, uint256 discount) {\\n        uint256 tierPrice;\\n        if(isWhitelist) {\\n            tierPrice = whitelistTiers[tier].price;\\n        } else {\\n            tierPrice = tiers[tier].price;\\n        }\\n        uint256 fullPrice = tierPrice * amount;\\n        discount = fullPrice * referrals[referral].discountPercentage / 100;\\n        commission = fullPrice * referrals[referral].commissionPercentage / 100;\\n        toPay = fullPrice - discount;\\n    }\\n\\n    /// @notice Calculates the price, commission and discount for X number of licenses in partner tier Y given referral code Z and partnerCod W\\n    /// @param amount The amount of licenses to claim\\n    /// @param tier The tier to buy the licenses from\\n    /// @param partnerCode The code identifying the partner sale\\n    /// @param referral A referral code that can give discounts.\\n    /// @return toPay The amount of ETH that should be paid by the claimer.\\n    /// @return commission The commission in ETH that the referrer will get.\\n    /// @return discount The discount in ETH the claimer will get\\n    function paymentDetailsForPartnerReferral(uint256 amount, uint256 tier, string memory partnerCode, string memory referral) public view returns (uint256 toPay, uint256 commission, uint256 discount) {\\n        uint256 tierPrice = partnerTiers[partnerCode][tier].price;\\n        uint256 fullPrice = tierPrice * amount;\\n        discount = fullPrice * referrals[referral].discountPercentage / 100;\\n        commission = fullPrice * referrals[referral].commissionPercentage / 100;\\n        toPay = fullPrice - discount;\\n    }\\n\\n    /// @notice Returns tier details provided a tier id\\n    /// @param id The tier id\\n    /// @param isWhitelist Whether the tier is used for the whitelist sale or not\\n    /// @return tier The tier\\n    function getTier(uint256 id, bool isWhitelist) public view returns(Tier memory tier) {\\n        if(isWhitelist) {\\n            tier = tiers[id];\\n        } else {\\n            tier = whitelistTiers[id];\\n        }\\n    }\\n\\n    /// @notice Returns partner tier details provided a partner code and tier id\\n    /// @param partnerCode The code of the partner to return the tier from\\n    /// @param id The tier id\\n    /// @return tier The tier\\n    function getPartnerTier(string calldata partnerCode, uint256 id) public view returns(Tier memory tier) {\\n        tier = partnerTiers[partnerCode][id];\\n    }\\n\\n    /// @notice Returns referral details provided a referral id\\n    /// @param id The referral id\\n    /// @return referral The referral\\n    function getReferral(string memory id) public view returns(Referral memory referral) {\\n        referral = referrals[id];\\n    }\\n\\n    /// @notice Sets referral details\\n    /// @param code The referral code to be used when claiming\\n    /// @param receiver The receiver address for the commissions\\n    /// @param commission The percentage of the total price to be used as a commission\\n    /// @param discount The percentage of the total price to be used as a discount\\n    function setReferral(string memory code, address receiver, uint256 commission, uint256 discount) public onlyReferralManager {\\n        _setReferral(code, receiver, commission, discount);\\n    }\\n\\n    /// @notice Sets tier details\\n    /// @param ids The ids of the tiers to set\\n    /// @param prices The prices of each tier to set\\n    /// @param individualCaps The maximum amount of licenses that can be claimed per address for the tiers.\\n    /// @param totalCaps The maximum amount of licenses that can be claimed in total for the tiers.\\n    function setTiers(uint256[] calldata ids, uint256[] calldata prices, uint256[] calldata individualCaps, uint256[] calldata totalCaps) external onlyAdmin {\\n        if(ids.length != prices.length || prices.length != individualCaps.length || individualCaps.length != totalCaps.length) revert InvalidTierInputs();\\n        for (uint256 i = 0; i < ids.length; ) {\\n            uint256 totalClaimed = tiers[ids[i]].totalClaimed;\\n            tiers[ids[i]] = Tier(prices[i], individualCaps[i], totalClaimed, totalCaps[i]);\\n            emit TierSet(ids[i], prices[i], individualCaps[i], totalClaimed, totalCaps[i]);\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    /// @notice Sets whitelist tier details\\n    /// @param ids The ids of the tiers to set\\n    /// @param prices The prices of each tier to set\\n    /// @param individualCaps The maximum amount of licenses that can be claimed per address for the tiers.\\n    /// @param totalCaps The maximum amount of licenses that can be claimed in total for the tiers.\\n    function setWhitelistTiers(uint256[] calldata ids, uint256[] calldata prices, uint256[] calldata individualCaps, uint256[] calldata totalCaps) external onlyAdmin {\\n        if(ids.length != prices.length || prices.length != individualCaps.length || individualCaps.length != totalCaps.length) revert InvalidTierInputs();\\n        for (uint256 i = 0; i < ids.length; ) {\\n            uint256 totalClaimed = whitelistTiers[ids[i]].totalClaimed;\\n            whitelistTiers[ids[i]] = Tier(prices[i], individualCaps[i], totalClaimed, totalCaps[i]);\\n            emit WhitelistTierSet(ids[i], prices[i], individualCaps[i], totalClaimed, totalCaps[i]);\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    /// @notice Sets partner tier details\\n    /// @param partnerCodes The codes of the partners to configure the tiers for\\n    /// @param ids The ids of the tiers to set\\n    /// @param prices The prices of each tier to set\\n    /// @param individualCaps The maximum amount of licenses that can be claimed per address for the tiers.\\n    /// @param totalCaps The maximum amount of licenses that can be claimed in total for the tiers.\\n    function setPartnerTiers(string[] calldata partnerCodes, uint256[] calldata ids, uint256[] calldata prices, uint256[] calldata individualCaps, uint256[] calldata totalCaps) external onlyAdmin {\\n        if(partnerCodes.length != ids.length || ids.length != prices.length || prices.length != individualCaps.length || individualCaps.length != totalCaps.length) revert InvalidTierInputs();\\n        for (uint256 i = 0; i < ids.length; ) {\\n            uint256 totalClaimed = partnerTiers[partnerCodes[i]][ids[i]].totalClaimed;\\n            partnerTiers[partnerCodes[i]][ids[i]] = Tier(prices[i], individualCaps[i], totalClaimed, totalCaps[i]);\\n            emit PartnerTierSet(partnerCodes[i],ids[i], prices[i], individualCaps[i], totalClaimed, totalCaps[i]);\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    /// @notice Sets the team sale merkle root\\n    /// @param _teamMerkleRoot The root of the team sale merkle tree\\n    function setTeamMerkleRoot(bytes32 _teamMerkleRoot) external onlyMerkleManager {\\n        teamMerkleRoot = _teamMerkleRoot;\\n        emit TeamMerkleRootSet(_teamMerkleRoot);\\n    }\\n\\n    /// @notice Sets the friends and family sale merkle root\\n    /// @param _friendsFamilyMerkleRoot The root of the friends and family sale merkle tree\\n    function setFriendsFamilyMerkleRoot(bytes32 _friendsFamilyMerkleRoot) external onlyMerkleManager {\\n        friendsFamilyMerkleRoot = _friendsFamilyMerkleRoot;\\n        emit FriendsFamilyMerkleRootSet(_friendsFamilyMerkleRoot);\\n    }\\n\\n    /// @notice Sets the early access sale merkle root\\n    /// @param _earlyAccessMerkleRoot The root of the early access sale merkle tree\\n    function setEarlyAccessMerkleRoot(bytes32 _earlyAccessMerkleRoot) external onlyMerkleManager {\\n        earlyAccessMerkleRoot = _earlyAccessMerkleRoot;\\n        emit EarlyAccessMerkleRootSet(_earlyAccessMerkleRoot);\\n    }\\n\\n    /// @notice Sets the public sale merkle root\\n    /// @param _publicMerkleRoot The root of the public sale merkle tree\\n    function setPublicMerkleRoot(bytes32 _publicMerkleRoot) external onlyMerkleManager {\\n        publicMerkleRoot = _publicMerkleRoot;\\n        emit PublicMerkleRootSet(_publicMerkleRoot);\\n    }\\n\\n    /// @notice Sets the team sale status\\n    /// @param status The status to set for the team sale\\n    function setTeamSale(bool status) external onlyGuardian {\\n        teamSaleActive = status;\\n        emit TeamSaleStatusSet(status);\\n    }\\n\\n    /// @notice Sets the friends and family sale status\\n    /// @param status The status to set for the friends and family sale\\n    function setFriendsFamilySale(bool status) external onlyGuardian {\\n        friendsFamilySaleActive = status;\\n        emit FriendsFamilySaleStatusSet(status);\\n    }\\n\\n    /// @notice Sets the early access sale status\\n    /// @param status The status to set for the early access sale\\n    function setEarlyAccessSale(bool status) external onlyGuardian {\\n        earlyAccessSaleActive = status;\\n        emit EarlyAccessSaleStatusSet(status);\\n    }\\n\\n    /// @notice Sets the partner sale status\\n    /// @param partnerCode The code of the partner sale to set the status from\\n    /// @param status The status to set for the partner sale\\n    function setPartnerSale(string memory partnerCode, bool status) external onlyGuardian {\\n        partnerSaleActive[partnerCode] = status;\\n        emit PartnerSaleStatusSet(status, partnerCode);\\n    }\\n\\n    /// @notice Sets the public sale status\\n    /// @param status The status to set for the public sale\\n    function setPublicSale(bool status) external onlyGuardian {\\n        publicSaleActive = status;\\n        emit PublicSaleStatusSet(status);\\n    }\\n\\n    /// @notice Withdraws the sale proceeds\\n    function withdrawProceeds() public onlyAdmin {\\n        uint256 amount = address(this).balance;\\n        (bool sent, ) = payable(msg.sender).call{ value: amount }(\\\"\\\");\\n        if (!sent) revert WithdrawalFailed();\\n        emit ProceedsWithdrawn(msg.sender, amount);\\n    }\\n\\n    function _setReferral(string memory code, address receiver, uint256 commission, uint256 discount) internal {\\n        if(discount > 50) revert InvalidDiscount();\\n        if(commission > 50) revert InvalidCommission();\\n        referrals[code].discountPercentage = discount;\\n        referrals[code].commissionPercentage = commission;\\n        referrals[code].receiver = receiver;\\n        emit ReferralUpdated(code, receiver, commission, discount);\\n    }\\n\\n    modifier onlyAdmin() {\\n        if (!hasRole(ADMIN_ROLE, msg.sender)) revert AccessDenied();\\n        _;\\n    }\\n\\n    modifier onlyMerkleManager() {\\n        if (!hasRole(MERKLE_MANAGER_ROLE, msg.sender)) revert AccessDenied();\\n        _;\\n    }\\n\\n    modifier onlyReferralManager() {\\n        if (!hasRole(REFERRAL_MANAGER_ROLE, msg.sender)) revert AccessDenied();\\n        _;\\n    }\\n\\n    modifier onlyGuardian() {\\n        if (!hasRole(GUARDIAN_ROLE, msg.sender)) revert AccessDenied();\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x8ae37a05cc56811966a9c6a646b5e3722db5a3d335eb2b6d936767f3dafff8a7\",\"license\":\"MIT\"},\"contracts/interfaces/IPlayFiLicenseSale.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.24;\\n\\n\\n/*\\n\\n                 .-+*###+-.\\n               =*%%%%%%%%%%#=:\\n               :=*%%%%%%%%%%%#+-.\\n                   .-+#%%%%%%%%%%%*=:\\n    :+##+-             :=#%%%%%%%%%%%#+-\\n   *%%%%%%%*=:            .-+#%%%%%%%%%%*.\\n  *%%%%%%%%#+:                :=#%%%%%%%%*\\n  #%%%%%%*:         .==:         .*%%%%%%%\\n  #%%%%%%=       :+#%%%%#+-       -%%%%#+:\\n  #%%%%%%=     :#%%%%%%%%%%#-     -%*=.\\n  #%%%%%%=     -%%%%%%%%%%%%=     .\\n  #%%%%%%=     -%%%%%%%%%%%%=\\n  #%%%%%%=     -%%%%%%%%%%%%=            :\\n  #%%%%%%=      .=*%%%%%%*=:         .-+#%\\n  #%%%%%%=          -++-.         :=#%%%%%\\n  *%%%%%%=                    .-+#%%%%%%%#\\n  .#%%%%%=                 :=*%%%%%%%%%%#:\\n    =*%%%=       #+-.  .-+#%%%%%%%%%%%*=\\n       -+=       #%%%##%%%%%%%%%%%#*-.\\n                 #%%%%%%%%%%%%%#=:\\n                 #%%%%%%%%%#*-.\\n                 :=*%%%%#=:\\n\\n*/\\n\\n\\n\\ninterface IPlayFiLicenseSale\\n{\\n    struct Tier {\\n        uint256 price;\\n        uint256 individualCap;\\n        uint256 totalClaimed;\\n        uint256 totalCap;\\n    }\\n\\n    struct Referral {\\n        uint256 discountPercentage;\\n        uint256 commissionPercentage;\\n        address receiver;\\n    }\\n\\n    event TeamLicensesClaimed(address indexed account, uint256 amount);\\n    event FriendsFamilyLicensesClaimed(address indexed account, uint256 paid, uint256 amount);\\n    event EarlyAccessLicensesClaimed(address indexed account, uint256 paid, uint256 amount);\\n    event PartnerLicensesClaimed(address indexed account, uint256 amount, uint256 indexed tier, uint256 paid, string partnerCode, string referral);\\n    event CommissionPaid(string code, address indexed receiver, uint256 amount);\\n    event PublicLicensesClaimed(address indexed account, uint256 amount, uint256 indexed tier, uint256 paid, string referral);\\n    event PublicWhitelistLicensesClaimed(address indexed account, uint256 amount, uint256 indexed tier, uint256 paid, string referral);\\n    event ReferralUpdated(string code, address indexed receiver, uint256 commission, uint256 discount);\\n    event TeamMerkleRootSet(bytes32 merkleRoot);\\n    event FriendsFamilyMerkleRootSet(bytes32 merkleRoot);\\n    event EarlyAccessMerkleRootSet(bytes32 merkleRoot);\\n    event PartnerMerkleRootSet(bytes32 merkleRoot);\\n    event PublicMerkleRootSet(bytes32 merkleRoot);\\n    event TeamSaleStatusSet(bool status);\\n    event FriendsFamilySaleStatusSet(bool status);\\n    event EarlyAccessSaleStatusSet(bool status);\\n    event PartnerSaleStatusSet(bool status, string partnerCode);\\n    event PublicSaleStatusSet(bool status);\\n    event ProceedsWithdrawn(address indexed receiver, uint256 amount);\\n    event TierSet(uint256 indexed tierId, uint256 price, uint256 individualCap, uint256 totalClaimed, uint256 totalCap);\\n    event WhitelistTierSet(uint256 indexed tierId, uint256 price, uint256 individualCap, uint256 totalClaimed, uint256 totalCap);\\n    event PartnerTierSet(string partnerCode, uint256 indexed tierId, uint256 price, uint256 individualCap, uint256 totalClaimed, uint256 totalCap);\\n    event ContractInitialized();\\n\\n    error InvalidAddress(address account);\\n    error TeamSaleNotActive();\\n    error IndividualClaimCapExceeded();\\n    error InvalidProof();\\n    error FriendsFamilySaleNotActive();\\n    error InsufficientPayment();\\n    error EarlyAccessSaleNotActive();\\n    error PartnerSaleNotActive();\\n    error PublicSaleNotActive();\\n    error TotalTierCapExceeded();\\n    error IndividualTierCapExceeded();\\n    error CommissionPayoutFailed();\\n    error WithdrawalFailed();\\n    error InvalidTierInputs();\\n    error AccessDenied();\\n    error InvalidDiscount();\\n    error InvalidCommission();\\n\\n    function claimLicenseTeam(uint256 amount, bytes calldata data, bytes32[] calldata merkleProof) external;\\n\\n    function claimLicenseFriendsFamily(uint256 amount, bytes calldata data, bytes32[] calldata merkleProof) external payable;\\n\\n    function claimLicenseEarlyAccess(uint256 amount, bytes calldata data, bytes32[] calldata merkleProof) external payable;\\n\\n    function claimLicensePartner(uint256 amount,  uint256 tier, string memory partnerCode, string memory referral) external payable;\\n\\n    function claimLicensePublic(uint256 amount, uint256 tier, string calldata referral) external payable;\\n\\n    function paymentDetailsForReferral(uint256 amount, uint256 tier, string calldata referral, bool isWhitelist) external view returns (uint256 toPay, uint256 commission, uint256 discount);\\n\\n    function paymentDetailsForPartnerReferral(uint256 amount, uint256 tier, string calldata partnerCode, string calldata referral) external view returns (uint256 toPay, uint256 commission, uint256 discount);\\n\\n    function getTier(uint256 id, bool isWhitelist) external view returns(Tier memory tier);\\n\\n    function getPartnerTier(string calldata partnerCode, uint256 id) external view returns(Tier memory tier);\\n\\n    function getReferral(string memory id) external view returns(Referral memory referral);\\n\\n    function setReferral(string memory code, address receiver, uint256 commission, uint256 discount) external;\\n\\n    function setTeamMerkleRoot(bytes32 _teamMerkleRoot) external;\\n\\n    function setFriendsFamilyMerkleRoot(bytes32 _friendsFamilyMerkleRoot) external;\\n\\n    function setEarlyAccessMerkleRoot(bytes32 _earlyAccessMerkleRoot) external;\\n\\n    function setPublicMerkleRoot(bytes32 _publicMerkleRoot) external;\\n\\n    function setTeamSale(bool status) external;\\n\\n    function setFriendsFamilySale(bool status) external;\\n\\n    function setEarlyAccessSale(bool status) external;\\n\\n    function setPartnerSale(string memory partnerCode, bool status) external;\\n\\n    function setPublicSale(bool status) external;\\n\\n    function setTiers(uint256[] calldata ids, uint256[] calldata prices, uint256[] calldata individualCaps, uint256[] calldata totalCaps) external;\\n\\n    function setWhitelistTiers(uint256[] calldata ids, uint256[] calldata prices, uint256[] calldata individualCaps, uint256[] calldata totalCaps) external;\\n\\n    function setPartnerTiers(string[] calldata partnerCodes, uint256[] calldata ids, uint256[] calldata prices, uint256[] calldata individualCaps, uint256[] calldata totalCaps) external;\\n\\n    function teamMerkleRoot() external view returns (bytes32);\\n\\n    function friendsFamilyMerkleRoot() external view returns (bytes32);\\n\\n    function earlyAccessMerkleRoot() external view returns (bytes32);\\n\\n    function publicMerkleRoot() external view returns (bytes32);\\n\\n    function teamSaleActive() external view returns (bool);\\n\\n    function friendsFamilySaleActive() external view returns (bool);\\n\\n    function earlyAccessSaleActive() external view returns (bool);\\n\\n    function partnerSaleActive(string calldata) external view returns (bool);\\n\\n    function publicSaleActive() external view returns (bool);\\n\\n    function standardCommissionPercentage() external view returns (uint256);\\n\\n    function standardDiscountPercentage() external view returns (uint256);\\n\\n    function totalLicenses() external view returns (uint256);\\n\\n}\\n\",\"keccak256\":\"0x77f5a1c82227a0711c8cc6bed065a8882f7cfac85ee10ced35802a46502a4add\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506200001c62000022565b620000e3565b600054610100900460ff16156200008f5760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff90811614620000e1576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b61507c80620000f36000396000f3fe6080604052600436106103a25760003560e01c806375b238fc116101e7578063bc8893b41161010d578063d55768dd116100a0578063e633fbf21161006f578063e633fbf214610d57578063e88e08a814610d6a578063f79eddb814610d8a578063f8c8765e14610db757600080fd5b8063d55768dd14610c76578063d923780114610d04578063dc47dced14610d17578063e4a5665f14610d3757600080fd5b8063cb75f4b2116100dc578063cb75f4b214610bfc578063cd98d26114610c1c578063d3d704cf14610c36578063d547741f14610c5657600080fd5b8063bc8893b414610b7b578063bfc2aa0c14610b9c578063bff7094f14610bbc578063ca59103614610bdc57600080fd5b8063a217fddf11610185578063a749df4b11610154578063a749df4b14610a81578063b21a687714610ad9578063b5e132f014610b0d578063bbbb28dc14610b5b57600080fd5b8063a217fddf14610a02578063a2671eb614610a17578063a49ef9ef14610a2d578063a6f04c3014610a6157600080fd5b80639038e693116101c15780639038e6931461095757806391d148541461096c5780639340b78b146109bf5780639d1d9aa6146109ec57600080fd5b806375b238fc146108d657806383b0287f1461090a5780638aea37101461092a57600080fd5b8063386de5ac116102cc5780635163d92f1161026a578063605a25c811610239578063605a25c814610816578063665eecf11461084e5780636d5143d61461086d5780636ec14ac4146108b657600080fd5b80635163d92f1461078157806355366621146107945780635822b9d7146107b45780635aca1bb6146107f657600080fd5b80634a0b6cf9116102a65780634a0b6cf9146106de5780634ba0fcee1461073b5780634dd16dba1461075b57806350cd60fc1461076e57600080fd5b8063386de5ac1461066d5780634458034a146106a857806346f6f479146106c857600080fd5b8063187e332411610344578063291408191161031357806329140819146106015780632f2ff15d146106175780633533b8e01461063757806336568abe1461064d57600080fd5b8063187e3324146105655780631b8c02681461057b578063248a9ca31461059d57806324ea54f4146105cd57600080fd5b806305d178761161038057806305d17876146104795780630e80a287146104cf578063118c04a4146104e5578063146235851461051257600080fd5b806301ffc9a7146103a7578063039af9eb146103dc578063041cb7281461043e575b600080fd5b3480156103b357600080fd5b506103c76103c23660046142fd565b610dd7565b60405190151581526020015b60405180910390f35b3480156103e857600080fd5b5061041e6103f736600461433f565b60a56020526000908152604090208054600182015460028301546003909301549192909184565b6040805194855260208501939093529183015260608201526080016103d3565b34801561044a57600080fd5b506103c7610459366004614432565b805160208183018101805160ab8252928201919093012091525460ff1681565b34801561048557600080fd5b506104c1610494366004614498565b815160208184018101805160a2825292820194820194909420919093529091526000908152604090205481565b6040519081526020016103d3565b3480156104db57600080fd5b506104c1609e5481565b3480156104f157600080fd5b506104c16105003660046144e6565b609f6020526000908152604090205481565b34801561051e57600080fd5b5061053261052d36600461454a565b610e70565b6040516103d391908151815260208083015190820152604080830151908201526060918201519181019190915260800190565b34801561057157600080fd5b506104c160985481565b34801561058757600080fd5b5061059b6105963660046145a6565b610ef8565b005b3480156105a957600080fd5b506104c16105b836600461433f565b60009081526065602052604090206001015490565b3480156105d957600080fd5b506104c17f8b5b16d04624687fcf0d0228f19993c9157c1ed07b41d8d430fd9100eb099fe881565b34801561060d57600080fd5b506104c160975481565b34801561062357600080fd5b5061059b6106323660046145eb565b610fb4565b34801561064357600080fd5b506104c160995481565b34801561065957600080fd5b5061059b6106683660046145eb565b610fde565b34801561067957600080fd5b5061068d61068836600461460e565b611096565b604080519384526020840192909252908201526060016103d3565b3480156106b457600080fd5b5061059b6106c3366004614685565b611160565b3480156106d457600080fd5b506104c1609d5481565b3480156106ea57600080fd5b5061041e6106f93660046146a0565b815160208184018101805160a7825292820194820194909420919093529091526000908152604090208054600182015460028301546003909301549192909184565b34801561074757600080fd5b5061059b610756366004614685565b611220565b61059b61076936600461460e565b6112d6565b61059b61077c36600461472a565b61172d565b61059b61078f36600461472a565b6119a3565b3480156107a057600080fd5b5061059b6107af3660046147a4565b611c0a565b3480156107c057600080fd5b5061041e6107cf36600461433f565b60a66020526000908152604090208054600182015460028301546003909301549192909184565b34801561080257600080fd5b5061059b610811366004614685565b611f0c565b34801561082257600080fd5b506104c16108313660046145eb565b60a960209081526000928352604080842090915290825290205481565b34801561085a57600080fd5b50609b546103c790610100900460ff1681565b34801561087957600080fd5b506104c1610888366004614895565b60a4602090815260009283526040909220815180830184018051928152908401929093019190912091525481565b3480156108c257600080fd5b5061059b6108d136600461472a565b611fc3565b3480156108e257600080fd5b506104c17fdf8b4c520ffe197c5343c6f5aec59570151ef9a492f2c624fd45ddde6135ec4281565b34801561091657600080fd5b50609b546103c79062010000900460ff1681565b34801561093657600080fd5b506104c16109453660046144e6565b60a16020526000908152604090205481565b34801561096357600080fd5b5061059b6121b7565b34801561097857600080fd5b506103c76109873660046145eb565b600091825260656020908152604080842073ffffffffffffffffffffffffffffffffffffffff93909316845291905290205460ff1690565b3480156109cb57600080fd5b506104c16109da3660046144e6565b60a36020526000908152604090205481565b3480156109f857600080fd5b506104c1609a5481565b348015610a0e57600080fd5b506104c1600081565b348015610a2357600080fd5b506104c1609c5481565b348015610a3957600080fd5b506104c17ffd2994b76294f3a7e0e5e4e40e73799b954c33f4bff642b5e760fef0d694a92481565b348015610a6d57600080fd5b5061059b610a7c3660046148e3565b6122c3565b348015610a8d57600080fd5b50610aa1610a9c366004614432565b61251e565b6040805182518152602080840151908201529181015173ffffffffffffffffffffffffffffffffffffffff16908201526060016103d3565b348015610ae557600080fd5b506104c17fceb656422d2e5768b364a6526533f6832c483c8cfbd416512fbbd6fa6413f96a81565b348015610b1957600080fd5b506104c1610b283660046149a7565b825160208185018101805160aa825292820195820195909520919094528352600091825260408083209093528152205481565b348015610b6757600080fd5b5061059b610b763660046148e3565b6125b4565b348015610b8757600080fd5b50609b546103c7906301000000900460ff1681565b348015610ba857600080fd5b5061059b610bb73660046149fe565b612804565b348015610bc857600080fd5b5061059b610bd736600461433f565b612865565b348015610be857600080fd5b5061059b610bf7366004614685565b6128e9565b348015610c0857600080fd5b50610532610c17366004614a5b565b612979565b348015610c2857600080fd5b50609b546103c79060ff1681565b348015610c4257600080fd5b5061059b610c5136600461433f565b612a3d565b348015610c6257600080fd5b5061059b610c713660046145eb565b612ac1565b348015610c8257600080fd5b50610cd3610c91366004614432565b805160208183018101805160a88252928201919093012091528054600182015460029092015490919073ffffffffffffffffffffffffffffffffffffffff1683565b60408051938452602084019290925273ffffffffffffffffffffffffffffffffffffffff16908201526060016103d3565b61059b610d12366004614a7e565b612ae6565b348015610d2357600080fd5b5061059b610d3236600461433f565b612e60565b348015610d4357600080fd5b5061059b610d5236600461433f565b612ee4565b61059b610d65366004614ace565b612f68565b348015610d7657600080fd5b5061068d610d85366004614b51565b6133e8565b348015610d9657600080fd5b506104c1610da53660046144e6565b60a06020526000908152604090205481565b348015610dc357600080fd5b5061059b610dd2366004614bb2565b613472565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f7965db0b000000000000000000000000000000000000000000000000000000001480610e6a57507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316145b92915050565b610e9b6040518060800160405280600081526020016000815260200160008152602001600081525090565b60a78484604051610ead929190614bfb565b90815260408051602092819003830181206000958652835293819020608085018252805485526001810154928501929092526002820154908401526003015460608301525092915050565b3360009081527f3a5f6b5b20ab0e425b1c7c9823b9866065cea388466bf7d4f12b2ad1dfbaf604602052604090205460ff16610f4757604051634ca8886760e01b815260040160405180910390fd5b8060ab83604051610f589190614c2f565b908152604051908190036020018120805492151560ff19909316929092179091557f81a0ab3096d0711caafd488b7a6d925320dbb9e6ae99f862b35ec7323af9826590610fa89083908590614c95565b60405180910390a15050565b600082815260656020526040902060010154610fcf8161398b565b610fd98383613998565b505050565b73ffffffffffffffffffffffffffffffffffffffff81163314611088576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201527f20726f6c657320666f722073656c66000000000000000000000000000000000060648201526084015b60405180910390fd5b6110928282613a6e565b5050565b60008060008060a7866040516110ac9190614c2f565b908152604080516020928190038301902060008a8152925281205491506110d38983614cdf565b9050606460a8876040516110e79190614c2f565b908152604051908190036020019020546111019083614cdf565b61110b9190614cf6565b9250606460a88760405161111f9190614c2f565b9081526020016040518091039020600101548261113c9190614cdf565b6111469190614cf6565b93506111528382614d31565b945050509450945094915050565b3360009081527f3a5f6b5b20ab0e425b1c7c9823b9866065cea388466bf7d4f12b2ad1dfbaf604602052604090205460ff166111af57604051634ca8886760e01b815260040160405180910390fd5b609b8054821515610100027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff9091161790556040517f9f5cf153333ec6c3f336a73d8dd75b350a36948f61b0b13ae43af5b5c144a6f59061121590831515815260200190565b60405180910390a150565b3360009081527f3a5f6b5b20ab0e425b1c7c9823b9866065cea388466bf7d4f12b2ad1dfbaf604602052604090205460ff1661126f57604051634ca8886760e01b815260040160405180910390fd5b609b805482151562010000027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ffff9091161790556040517f643f3a44207851ae16a2c404fa7307be53087b3a8e378e0c908e592c64f506699061121590831515815260200190565b60ab826040516112e69190614c2f565b9081526040519081900360200190205460ff1661132f576040517fb4eb177f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60a78260405161133f9190614c2f565b90815260408051918290036020908101832060008781529152206003015490859060a79061136e908690614c2f565b908152602001604051809103902060008681526020019081526020016000206002015461139b9190614d44565b11156113d3576040517f98a3f79100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60a7826040516113e39190614c2f565b90815260408051918290036020908101832060008781529152206001015490859060aa90611412908690614c2f565b908152604080516020928190038301902060008881529083528181203382529092529020546114419190614d44565b1115611479576040517fbbd4c2bd00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008061148886868686611096565b5091509150813410156114c7576040517fcd1c886700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80156115fb57600060a8846040516114df9190614c2f565b9081526040519081900360200181206002015473ffffffffffffffffffffffffffffffffffffffff1690839060006040518083038185875af1925050503d8060008114611548576040519150601f19603f3d011682016040523d82523d6000602084013e61154d565b606091505b5050905080611588576040517f1ac89c8000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60a8846040516115989190614c2f565b9081526040519081900360200181206002015473ffffffffffffffffffffffffffffffffffffffff16907f32f584d0754f9710dea21e509acf4c6b5885c93f3cf96f1ed74256887485d130906115f19087908690614d57565b60405180910390a2505b600061160633613b0b565b905060a8816040516116189190614c2f565b9081526040519081900360200190205460000361163f5761163f8133609c54609d54613b2e565b8660a7866040516116509190614c2f565b9081526020016040518091039020600088815260200190815260200160002060020160008282546116819190614d44565b925050819055508660a2866040516116999190614c2f565b90815260408051602092819003830190203360009081529252812080549091906116c4908490614d44565b9250508190555086609e60008282546116dd9190614d44565b9091555050604051869033907fa85906c3100968a0ea21181f8a4c6d299823828a0573f27a6c17a68c1af4a4ec9061171c908b9088908b908b90614d79565b60405180910390a350505050505050565b609b54610100900460ff1661176e576040517f7856fae200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008061177d85870187614db5565b33600090815260a0602052604090205491935091508161179d828a614d44565b11156117d5576040517f7a399cc900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60408051602081018590527fffffffffffffffffffffffffffffffffffffffff0000000000000000000000003360601b169181019190915260548101839052600090607401604051602081830303815290604052805190602001209050611873868680806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250506098549150849050613c94565b6118a9576040517f09bde33900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600090815260a56020527f3cdd87bd16aed04484229287c5bc39384778a2cba3efb90ce9f23f83f81cfedb546118e2908b90614cdf565b90508034101561191e576040517fcd1c886700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b33600090815260a06020526040812080548c929061193d908490614d44565b9250508190555089609e60008282546119569190614d44565b909155505060408051828152602081018c905233917f09f1b238e0c956383f51f6a0a249784a40ca5b7a87c8b151a727016be60cccd591015b60405180910390a250505050505050505050565b609b5462010000900460ff166119e5576040517f724187c200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000806119f485870187614db5565b33600090815260a16020526040902054919350915081611a14828a614d44565b1115611a4c576040517f7a399cc900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60408051602081018590527fffffffffffffffffffffffffffffffffffffffff0000000000000000000000003360601b169181019190915260548101839052600090607401604051602081830303815290604052805190602001209050611aea868680806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250506099549150849050613c94565b611b20576040517f09bde33900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600090815260a56020527f3cdd87bd16aed04484229287c5bc39384778a2cba3efb90ce9f23f83f81cfedb54611b59908b90614cdf565b905080341015611b95576040517fcd1c886700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b33600090815260a16020526040812080548c9290611bb4908490614d44565b9250508190555089609e6000828254611bcd9190614d44565b909155505060408051828152602081018c905233917f7d6d20e50ff90d3c35b2d0182ab7dd6825df9759011eb6ae1499640a2c2b2eeb910161198f565b3360009081527f9de19bebcfec5fefaa13a42edbcc11cb6ff633bb0eb0a7f29bcb2311657057e0602052604090205460ff16611c5957604051634ca8886760e01b815260040160405180910390fd5b8887141580611c685750868514155b80611c735750848314155b80611c7e5750828114155b15611cb5576040517f8d7b788500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b87811015611eff57600060a78c8c84818110611cd657611cd6614dd7565b9050602002810190611ce89190614e06565b604051611cf6929190614bfb565b908152602001604051809103902060008b8b85818110611d1857611d18614dd7565b9050602002013581526020019081526020016000206002015490506040518060800160405280898985818110611d5057611d50614dd7565b905060200201358152602001878785818110611d6e57611d6e614dd7565b905060200201358152602001828152602001858585818110611d9257611d92614dd7565b9050602002013581525060a78d8d85818110611db057611db0614dd7565b9050602002810190611dc29190614e06565b604051611dd0929190614bfb565b908152602001604051809103902060008c8c86818110611df257611df2614dd7565b90506020020135815260200190815260200160002060008201518160000155602082015181600101556040820151816002015560608201518160030155905050898983818110611e4457611e44614dd7565b905060200201357fb594049245992a738d373cbadb4c71bff13c5415bb08132a24528b25700adc8f8d8d85818110611e7e57611e7e614dd7565b9050602002810190611e909190614e06565b8b8b87818110611ea257611ea2614dd7565b905060200201358a8a88818110611ebb57611ebb614dd7565b90506020020135868a8a8a818110611ed557611ed5614dd7565b90506020020135604051611eee96959493929190614e6b565b60405180910390a250600101611cb8565b5050505050505050505050565b3360009081527f3a5f6b5b20ab0e425b1c7c9823b9866065cea388466bf7d4f12b2ad1dfbaf604602052604090205460ff16611f5b57604051634ca8886760e01b815260040160405180910390fd5b609b80548215156301000000027fffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ffffff9091161790556040517f3b7b44afae3b983507896693d669f6119d5ab003ec1ab51123108429bd5d46d79061121590831515815260200190565b609b5460ff16611fff576040517f27dc08c400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008061200e85870187614db5565b336000908152609f602052604090205491935091508161202e828a614d44565b1115612066576040517f7a399cc900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60408051602081018590527fffffffffffffffffffffffffffffffffffffffff0000000000000000000000003360601b169181019190915260548101839052600090607401604051602081830303815290604052805190602001209050612104868680806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250506097549150849050613c94565b61213a576040517f09bde33900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b336000908152609f6020526040812080548b9290612159908490614d44565b9250508190555088609e60008282546121729190614d44565b909155505060405189815233907fdcf2314e0115a42fe2b3fcfb533c03e95dc48bc7769a9c2b61a14883c0b449e09060200160405180910390a2505050505050505050565b3360009081527f9de19bebcfec5fefaa13a42edbcc11cb6ff633bb0eb0a7f29bcb2311657057e0602052604090205460ff1661220657604051634ca8886760e01b815260040160405180910390fd5b6040514790600090339083908381818185875af1925050503d806000811461224a576040519150601f19603f3d011682016040523d82523d6000602084013e61224f565b606091505b505090508061228a576040517f27fcd9d100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60405182815233907f0f2fb75cc1977a496e94837f859e957f68e26e70dc1b75d9945ee92ae57969ba9060200160405180910390a25050565b3360009081527f9de19bebcfec5fefaa13a42edbcc11cb6ff633bb0eb0a7f29bcb2311657057e0602052604090205460ff1661231257604051634ca8886760e01b815260040160405180910390fd5b86851415806123215750848314155b8061232c5750828114155b15612363576040517f8d7b788500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b8781101561251357600060a560008b8b8581811061238657612386614dd7565b90506020020135815260200190815260200160002060020154905060405180608001604052808989858181106123be576123be614dd7565b9050602002013581526020018787858181106123dc576123dc614dd7565b90506020020135815260200182815260200185858581811061240057612400614dd7565b9050602002013581525060a560008c8c8681811061242057612420614dd7565b9050602002013581526020019081526020016000206000820151816000015560208201518160010155604082015181600201556060820151816003015590505089898381811061247257612472614dd7565b905060200201357fefd55558319646aa70e53c48ba0480d26d9fdce9d6399432fac9356ee254944c8989858181106124ac576124ac614dd7565b905060200201358888868181106124c5576124c5614dd7565b90506020020135848888888181106124df576124df614dd7565b604080519687526020878101969096528601939093525091020135606082015260800160405180910390a250600101612366565b505050505050505050565b61255860405180606001604052806000815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff1681525090565b60a8826040516125689190614c2f565b908152604080519182900360209081018320606084018352805484526001810154918401919091526002015473ffffffffffffffffffffffffffffffffffffffff169082015292915050565b3360009081527f9de19bebcfec5fefaa13a42edbcc11cb6ff633bb0eb0a7f29bcb2311657057e0602052604090205460ff1661260357604051634ca8886760e01b815260040160405180910390fd5b86851415806126125750848314155b8061261d5750828114155b15612654576040517f8d7b788500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b8781101561251357600060a660008b8b8581811061267757612677614dd7565b90506020020135815260200190815260200160002060020154905060405180608001604052808989858181106126af576126af614dd7565b9050602002013581526020018787858181106126cd576126cd614dd7565b9050602002013581526020018281526020018585858181106126f1576126f1614dd7565b9050602002013581525060a660008c8c8681811061271157612711614dd7565b9050602002013581526020019081526020016000206000820151816000015560208201518160010155604082015181600201556060820151816003015590505089898381811061276357612763614dd7565b905060200201357fc9dc860a4ebff48880e12d6561e76353bec03d096d8339da1a00c77b2e672ccb89898581811061279d5761279d614dd7565b905060200201358888868181106127b6576127b6614dd7565b90506020020135848888888181106127d0576127d0614dd7565b604080519687526020878101969096528601939093525091020135606082015260800160405180910390a250600101612657565b3360009081527f93597da006e5eb572f6ec69e1ccdaa385853d6a136697cd54f88b4acaace9499602052604090205460ff1661285357604051634ca8886760e01b815260040160405180910390fd5b61285f84848484613b2e565b50505050565b3360009081527f0f8f48858e118d2eab32cf95c88221b6c0a0d6e1fed7aef78e355435fa71bc6f602052604090205460ff166128b457604051634ca8886760e01b815260040160405180910390fd5b609a8190556040518181527f1113c739a7b79ad7fe9572522e32b648f09eb5b1c329efd91dcb309da05541fb90602001611215565b3360009081527f3a5f6b5b20ab0e425b1c7c9823b9866065cea388466bf7d4f12b2ad1dfbaf604602052604090205460ff1661293857604051634ca8886760e01b815260040160405180910390fd5b609b805460ff19168215159081179091556040519081527fadafd3bec1c754707cbddc626a6214c879cecc475375ff8f5a1dbc329939869390602001611215565b6129a46040518060800160405280600081526020016000815260200160008152602001600081525090565b81156129f75760a560008481526020019081526020016000206040518060800160405290816000820154815260200160018201548152602001600282015481526020016003820154815250509050610e6a565b5050600090815260a66020908152604091829020825160808101845281548152600182015492810192909252600281015492820192909252600390910154606082015290565b3360009081527f0f8f48858e118d2eab32cf95c88221b6c0a0d6e1fed7aef78e355435fa71bc6f602052604090205460ff16612a8c57604051634ca8886760e01b815260040160405180910390fd5b60998190556040518181527fed5a3c80523111a140a98ec8643e5fb5ac073fe6b8528163c00123af11e4b31a90602001611215565b600082815260656020526040902060010154612adc8161398b565b610fd98383613a6e565b609b546301000000900460ff16612b29576040517fc7d08f0400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600082815260a5602052604090206003810154600290910154612b4d908590614d44565b1115612b85576040517f98a3f79100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600082815260a5602090815260408083206001015460a9835281842033855290925290912054612bb6908590614d44565b1115612bee576040517fbbd4c2bd00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600080612bfe85858560006133e8565b509150915081341015612c3d576040517fcd1c886700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8015612d7157600060a884604051612c559190614c2f565b9081526040519081900360200181206002015473ffffffffffffffffffffffffffffffffffffffff1690839060006040518083038185875af1925050503d8060008114612cbe576040519150601f19603f3d011682016040523d82523d6000602084013e612cc3565b606091505b5050905080612cfe576040517f1ac89c8000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60a884604051612d0e9190614c2f565b9081526040519081900360200181206002015473ffffffffffffffffffffffffffffffffffffffff16907f32f584d0754f9710dea21e509acf4c6b5885c93f3cf96f1ed74256887485d13090612d679087908690614d57565b60405180910390a2505b6000612d7c33613b0b565b905060a881604051612d8e9190614c2f565b90815260405190819003602001902054600003612db557612db58133609c54609d54613b2e565b600085815260a5602052604081206002018054889290612dd6908490614d44565b909155505033600090815260a3602052604081208054889290612dfa908490614d44565b9250508190555085609e6000828254612e139190614d44565b9091555050604051859033907f667f777d5c0d93b002117ea7ffc49143b4c2180cb35b02848c4ab62631a0cd2590612e50908a9088908a90614ed7565b60405180910390a3505050505050565b3360009081527f0f8f48858e118d2eab32cf95c88221b6c0a0d6e1fed7aef78e355435fa71bc6f602052604090205460ff16612eaf57604051634ca8886760e01b815260040160405180910390fd5b60978190556040518181527f9811c75983304a889ec0cb24de6cb2a102ceef14040efeca89e8361047af9daf90602001611215565b3360009081527f0f8f48858e118d2eab32cf95c88221b6c0a0d6e1fed7aef78e355435fa71bc6f602052604090205460ff16612f3357604051634ca8886760e01b815260040160405180910390fd5b60988190556040518181527fa9def886987ec775de3f208d9045235d630a49852d8da931fa98c53e9c4a799590602001611215565b609b546301000000900460ff16612fab576040517fc7d08f0400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008080612fbb86880188614a7e565b60008b815260a6602052604090206003810154600290910154939650919450925090612fe8908b90614d44565b1115613020576040517f98a3f79100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b33600090815260a46020526040808220905161303d908490614c2f565b9081526040519081900360200190205490508261305a828c614d44565b1115613092576040517f7a399cc900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000843385856040516020016130ab9493929190614eff565b60405160208183030381529060405280519060200120905061310487878080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050609a549150849050613c94565b61313a576040517f09bde33900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5060008061314b8c8c8660016133e8565b50915091508134101561318a576040517fcd1c886700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80156132be57600060a8856040516131a29190614c2f565b9081526040519081900360200181206002015473ffffffffffffffffffffffffffffffffffffffff1690839060006040518083038185875af1925050503d806000811461320b576040519150601f19603f3d011682016040523d82523d6000602084013e613210565b606091505b505090508061324b576040517f1ac89c8000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60a88560405161325b9190614c2f565b9081526040519081900360200181206002015473ffffffffffffffffffffffffffffffffffffffff16907f32f584d0754f9710dea21e509acf4c6b5885c93f3cf96f1ed74256887485d130906132b49088908690614d57565b60405180910390a2505b60006132c933613b0b565b905060a8816040516132db9190614c2f565b90815260405190819003602001902054600003613302576133028133609c54609d54613b2e565b60008c815260a66020526040812060020180548f9290613323908490614d44565b909155505033600090815260a460205260409081902090518e9190613349908890614c2f565b908152602001604051809103902060008282546133669190614d44565b925050819055508c609e600082825461337f9190614d44565b925050819055508b3373ffffffffffffffffffffffffffffffffffffffff167fc72e71a3feffde96ea8e1ea0580c51515589e1191e54ae4152c6446d43770b8c8f86896040516133d193929190614ed7565b60405180910390a350505050505050505050505050565b60008060008084156134095750600086815260a6602052604090205461341a565b50600086815260a560205260409020545b60006134268983614cdf565b9050606460a88860405161343a9190614c2f565b908152604051908190036020019020546134549083614cdf565b61345e9190614cf6565b9250606460a88860405161111f9190614c2f565b600054610100900460ff16158080156134925750600054600160ff909116105b806134ac5750303b1580156134ac575060005460ff166001145b613538576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a6564000000000000000000000000000000000000606482015260840161107f565b6000805460ff19166001179055801561357857600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff166101001790555b613580613caa565b73ffffffffffffffffffffffffffffffffffffffff85166135e5576040517f8e4c8aa600000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8616600482015260240161107f565b73ffffffffffffffffffffffffffffffffffffffff841661364a576040517f8e4c8aa600000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8516600482015260240161107f565b73ffffffffffffffffffffffffffffffffffffffff83166136af576040517f8e4c8aa600000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8416600482015260240161107f565b73ffffffffffffffffffffffffffffffffffffffff8216613714576040517f8e4c8aa600000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8316600482015260240161107f565b61373e7fdf8b4c520ffe197c5343c6f5aec59570151ef9a492f2c624fd45ddde6135ec4286613998565b6137687fdf8b4c520ffe197c5343c6f5aec59570151ef9a492f2c624fd45ddde6135ec4280613d43565b6137927f8b5b16d04624687fcf0d0228f19993c9157c1ed07b41d8d430fd9100eb099fe885613998565b6137bc7f8b5b16d04624687fcf0d0228f19993c9157c1ed07b41d8d430fd9100eb099fe886613998565b6138067f8b5b16d04624687fcf0d0228f19993c9157c1ed07b41d8d430fd9100eb099fe87fdf8b4c520ffe197c5343c6f5aec59570151ef9a492f2c624fd45ddde6135ec42613d43565b6138307ffd2994b76294f3a7e0e5e4e40e73799b954c33f4bff642b5e760fef0d694a92484613998565b61387a7ffd2994b76294f3a7e0e5e4e40e73799b954c33f4bff642b5e760fef0d694a9247fdf8b4c520ffe197c5343c6f5aec59570151ef9a492f2c624fd45ddde6135ec42613d43565b6138a47fceb656422d2e5768b364a6526533f6832c483c8cfbd416512fbbd6fa6413f96a83613998565b6138ee7fceb656422d2e5768b364a6526533f6832c483c8cfbd416512fbbd6fa6413f96a7fdf8b4c520ffe197c5343c6f5aec59570151ef9a492f2c624fd45ddde6135ec42613d43565b6005609c819055609d556040517f9f4eefba9f06bdd612ec93892ddb6d0bf72365e3835c1159ce2f0b9f172bfcbd90600090a1801561398457600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050505050565b6139958133613d8e565b50565b600082815260656020908152604080832073ffffffffffffffffffffffffffffffffffffffff8516845290915290205460ff1661109257600082815260656020908152604080832073ffffffffffffffffffffffffffffffffffffffff851684529091529020805460ff19166001179055613a103390565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b600082815260656020908152604080832073ffffffffffffffffffffffffffffffffffffffff8516845290915290205460ff161561109257600082815260656020908152604080832073ffffffffffffffffffffffffffffffffffffffff85168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6060610e6a73ffffffffffffffffffffffffffffffffffffffff83166014613e48565b6032811115613b69576040517f997ea36000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6032821115613ba4576040517fdc81db8500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8060a885604051613bb59190614c2f565b90815260405190819003602001812091909155829060a890613bd8908790614c2f565b9081526020016040518091039020600101819055508260a885604051613bfe9190614c2f565b908152604051908190036020018120600201805473ffffffffffffffffffffffffffffffffffffffff9384167fffffffffffffffffffffffff0000000000000000000000000000000000000000909116179055908416907fab01b91658e399ea84d00e2fef9a83efae42fb6f4114c76abf714ff3a34db4c390613c8690879086908690614f58565b60405180910390a250505050565b600082613ca18584614092565b14949350505050565b600054610100900460ff16613d41576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e67000000000000000000000000000000000000000000606482015260840161107f565b565b600082815260656020526040808220600101805490849055905190918391839186917fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff9190a4505050565b600082815260656020908152604080832073ffffffffffffffffffffffffffffffffffffffff8516845290915290205460ff1661109257613dce816140d5565b613dd98360206140f4565b604051602001613dea929190614f7d565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0818403018152908290527f08c379a000000000000000000000000000000000000000000000000000000000825261107f91600401614ffe565b60606000613e57836002614cdf565b613e62906002614d44565b67ffffffffffffffff811115613e7a57613e7a614358565b6040519080825280601f01601f191660200182016040528015613ea4576020820181803683370190505b5090507f300000000000000000000000000000000000000000000000000000000000000081600081518110613edb57613edb614dd7565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f780000000000000000000000000000000000000000000000000000000000000081600181518110613f3e57613f3e614dd7565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053506000613f7a846002614cdf565b613f85906001614d44565b90505b6001811115614022577f303132333435363738396162636465660000000000000000000000000000000085600f1660108110613fc657613fc6614dd7565b1a60f81b828281518110613fdc57613fdc614dd7565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060049490941c9361401b81615011565b9050613f88565b50831561408b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e74604482015260640161107f565b9392505050565b600081815b84518110156140cd576140c3828683815181106140b6576140b6614dd7565b60200260200101516142ce565b9150600101614097565b509392505050565b6060610e6a73ffffffffffffffffffffffffffffffffffffffff831660145b60606000614103836002614cdf565b61410e906002614d44565b67ffffffffffffffff81111561412657614126614358565b6040519080825280601f01601f191660200182016040528015614150576020820181803683370190505b5090507f30000000000000000000000000000000000000000000000000000000000000008160008151811061418757614187614dd7565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f7800000000000000000000000000000000000000000000000000000000000000816001815181106141ea576141ea614dd7565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053506000614226846002614cdf565b614231906001614d44565b90505b6001811115614022577f303132333435363738396162636465660000000000000000000000000000000085600f166010811061427257614272614dd7565b1a60f81b82828151811061428857614288614dd7565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060049490941c936142c781615011565b9050614234565b60008183106142ea57600082815260208490526040902061408b565b600083815260208390526040902061408b565b60006020828403121561430f57600080fd5b81357fffffffff000000000000000000000000000000000000000000000000000000008116811461408b57600080fd5b60006020828403121561435157600080fd5b5035919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600082601f83011261439857600080fd5b813567ffffffffffffffff808211156143b3576143b3614358565b604051601f83017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f011681019082821181831017156143f9576143f9614358565b8160405283815286602085880101111561441257600080fd5b836020870160208301376000602085830101528094505050505092915050565b60006020828403121561444457600080fd5b813567ffffffffffffffff81111561445b57600080fd5b61446784828501614387565b949350505050565b803573ffffffffffffffffffffffffffffffffffffffff8116811461449357600080fd5b919050565b600080604083850312156144ab57600080fd5b823567ffffffffffffffff8111156144c257600080fd5b6144ce85828601614387565b9250506144dd6020840161446f565b90509250929050565b6000602082840312156144f857600080fd5b61408b8261446f565b60008083601f84011261451357600080fd5b50813567ffffffffffffffff81111561452b57600080fd5b60208301915083602082850101111561454357600080fd5b9250929050565b60008060006040848603121561455f57600080fd5b833567ffffffffffffffff81111561457657600080fd5b61458286828701614501565b909790965060209590950135949350505050565b8035801515811461449357600080fd5b600080604083850312156145b957600080fd5b823567ffffffffffffffff8111156145d057600080fd5b6145dc85828601614387565b9250506144dd60208401614596565b600080604083850312156145fe57600080fd5b823591506144dd6020840161446f565b6000806000806080858703121561462457600080fd5b8435935060208501359250604085013567ffffffffffffffff8082111561464a57600080fd5b61465688838901614387565b9350606087013591508082111561466c57600080fd5b5061467987828801614387565b91505092959194509250565b60006020828403121561469757600080fd5b61408b82614596565b600080604083850312156146b357600080fd5b823567ffffffffffffffff8111156146ca57600080fd5b6146d685828601614387565b95602094909401359450505050565b60008083601f8401126146f757600080fd5b50813567ffffffffffffffff81111561470f57600080fd5b6020830191508360208260051b850101111561454357600080fd5b60008060008060006060868803121561474257600080fd5b85359450602086013567ffffffffffffffff8082111561476157600080fd5b61476d89838a01614501565b9096509450604088013591508082111561478657600080fd5b50614793888289016146e5565b969995985093965092949392505050565b60008060008060008060008060008060a08b8d0312156147c357600080fd5b8a3567ffffffffffffffff808211156147db57600080fd5b6147e78e838f016146e5565b909c509a5060208d013591508082111561480057600080fd5b61480c8e838f016146e5565b909a50985060408d013591508082111561482557600080fd5b6148318e838f016146e5565b909850965060608d013591508082111561484a57600080fd5b6148568e838f016146e5565b909650945060808d013591508082111561486f57600080fd5b5061487c8d828e016146e5565b915080935050809150509295989b9194979a5092959850565b600080604083850312156148a857600080fd5b6148b18361446f565b9150602083013567ffffffffffffffff8111156148cd57600080fd5b6148d985828601614387565b9150509250929050565b6000806000806000806000806080898b0312156148ff57600080fd5b883567ffffffffffffffff8082111561491757600080fd5b6149238c838d016146e5565b909a50985060208b013591508082111561493c57600080fd5b6149488c838d016146e5565b909850965060408b013591508082111561496157600080fd5b61496d8c838d016146e5565b909650945060608b013591508082111561498657600080fd5b506149938b828c016146e5565b999c989b5096995094979396929594505050565b6000806000606084860312156149bc57600080fd5b833567ffffffffffffffff8111156149d357600080fd5b6149df86828701614387565b935050602084013591506149f56040850161446f565b90509250925092565b60008060008060808587031215614a1457600080fd5b843567ffffffffffffffff811115614a2b57600080fd5b614a3787828801614387565b945050614a466020860161446f565b93969395505050506040820135916060013590565b60008060408385031215614a6e57600080fd5b823591506144dd60208401614596565b600080600060608486031215614a9357600080fd5b8335925060208401359150604084013567ffffffffffffffff811115614ab857600080fd5b614ac486828701614387565b9150509250925092565b60008060008060008060808789031215614ae757600080fd5b8635955060208701359450604087013567ffffffffffffffff80821115614b0d57600080fd5b614b198a838b01614501565b90965094506060890135915080821115614b3257600080fd5b50614b3f89828a016146e5565b979a9699509497509295939492505050565b60008060008060808587031215614b6757600080fd5b8435935060208501359250604085013567ffffffffffffffff811115614b8c57600080fd5b614b9887828801614387565b925050614ba760608601614596565b905092959194509250565b60008060008060808587031215614bc857600080fd5b614bd18561446f565b9350614bdf6020860161446f565b9250614bed6040860161446f565b9150614ba76060860161446f565b8183823760009101908152919050565b60005b83811015614c26578181015183820152602001614c0e565b50506000910152565b60008251614c41818460208701614c0b565b9190910192915050565b60008151808452614c63816020860160208601614c0b565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b82151581526040602082015260006144676040830184614c4b565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b8082028115828204841417610e6a57610e6a614cb0565b600082614d2c577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b81810381811115610e6a57610e6a614cb0565b80820180821115610e6a57610e6a614cb0565b604081526000614d6a6040830185614c4b565b90508260208301529392505050565b848152836020820152608060408201526000614d986080830185614c4b565b8281036060840152614daa8185614c4b565b979650505050505050565b60008060408385031215614dc857600080fd5b50508035926020909101359150565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1843603018112614e3b57600080fd5b83018035915067ffffffffffffffff821115614e5657600080fd5b60200191503681900382131561454357600080fd5b60a081528560a0820152858760c0830137600060c08783010152600060c07fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8901168301019050856020830152846040830152836060830152826080830152979650505050505050565b838152826020820152606060408201526000614ef66060830184614c4b565b95945050505050565b8481527fffffffffffffffffffffffffffffffffffffffff0000000000000000000000008460601b16602082015282603482015260008251614f48816054850160208701614c0b565b9190910160540195945050505050565b606081526000614f6b6060830186614c4b565b60208301949094525060400152919050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351614fb5816017850160208801614c0b565b7f206973206d697373696e6720726f6c65200000000000000000000000000000006017918401918201528351614ff2816028840160208801614c0b565b01602801949350505050565b60208152600061408b6020830184614c4b565b60008161502057615020614cb0565b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff019056fea26469706673582212206947e8d7a39671f78eaf5acdcb545540cb682926ea8bb1f37488404fc6c9bc7d64736f6c63430008180033",
  "deployedBytecode": "0x6080604052600436106103a25760003560e01c806375b238fc116101e7578063bc8893b41161010d578063d55768dd116100a0578063e633fbf21161006f578063e633fbf214610d57578063e88e08a814610d6a578063f79eddb814610d8a578063f8c8765e14610db757600080fd5b8063d55768dd14610c76578063d923780114610d04578063dc47dced14610d17578063e4a5665f14610d3757600080fd5b8063cb75f4b2116100dc578063cb75f4b214610bfc578063cd98d26114610c1c578063d3d704cf14610c36578063d547741f14610c5657600080fd5b8063bc8893b414610b7b578063bfc2aa0c14610b9c578063bff7094f14610bbc578063ca59103614610bdc57600080fd5b8063a217fddf11610185578063a749df4b11610154578063a749df4b14610a81578063b21a687714610ad9578063b5e132f014610b0d578063bbbb28dc14610b5b57600080fd5b8063a217fddf14610a02578063a2671eb614610a17578063a49ef9ef14610a2d578063a6f04c3014610a6157600080fd5b80639038e693116101c15780639038e6931461095757806391d148541461096c5780639340b78b146109bf5780639d1d9aa6146109ec57600080fd5b806375b238fc146108d657806383b0287f1461090a5780638aea37101461092a57600080fd5b8063386de5ac116102cc5780635163d92f1161026a578063605a25c811610239578063605a25c814610816578063665eecf11461084e5780636d5143d61461086d5780636ec14ac4146108b657600080fd5b80635163d92f1461078157806355366621146107945780635822b9d7146107b45780635aca1bb6146107f657600080fd5b80634a0b6cf9116102a65780634a0b6cf9146106de5780634ba0fcee1461073b5780634dd16dba1461075b57806350cd60fc1461076e57600080fd5b8063386de5ac1461066d5780634458034a146106a857806346f6f479146106c857600080fd5b8063187e332411610344578063291408191161031357806329140819146106015780632f2ff15d146106175780633533b8e01461063757806336568abe1461064d57600080fd5b8063187e3324146105655780631b8c02681461057b578063248a9ca31461059d57806324ea54f4146105cd57600080fd5b806305d178761161038057806305d17876146104795780630e80a287146104cf578063118c04a4146104e5578063146235851461051257600080fd5b806301ffc9a7146103a7578063039af9eb146103dc578063041cb7281461043e575b600080fd5b3480156103b357600080fd5b506103c76103c23660046142fd565b610dd7565b60405190151581526020015b60405180910390f35b3480156103e857600080fd5b5061041e6103f736600461433f565b60a56020526000908152604090208054600182015460028301546003909301549192909184565b6040805194855260208501939093529183015260608201526080016103d3565b34801561044a57600080fd5b506103c7610459366004614432565b805160208183018101805160ab8252928201919093012091525460ff1681565b34801561048557600080fd5b506104c1610494366004614498565b815160208184018101805160a2825292820194820194909420919093529091526000908152604090205481565b6040519081526020016103d3565b3480156104db57600080fd5b506104c1609e5481565b3480156104f157600080fd5b506104c16105003660046144e6565b609f6020526000908152604090205481565b34801561051e57600080fd5b5061053261052d36600461454a565b610e70565b6040516103d391908151815260208083015190820152604080830151908201526060918201519181019190915260800190565b34801561057157600080fd5b506104c160985481565b34801561058757600080fd5b5061059b6105963660046145a6565b610ef8565b005b3480156105a957600080fd5b506104c16105b836600461433f565b60009081526065602052604090206001015490565b3480156105d957600080fd5b506104c17f8b5b16d04624687fcf0d0228f19993c9157c1ed07b41d8d430fd9100eb099fe881565b34801561060d57600080fd5b506104c160975481565b34801561062357600080fd5b5061059b6106323660046145eb565b610fb4565b34801561064357600080fd5b506104c160995481565b34801561065957600080fd5b5061059b6106683660046145eb565b610fde565b34801561067957600080fd5b5061068d61068836600461460e565b611096565b604080519384526020840192909252908201526060016103d3565b3480156106b457600080fd5b5061059b6106c3366004614685565b611160565b3480156106d457600080fd5b506104c1609d5481565b3480156106ea57600080fd5b5061041e6106f93660046146a0565b815160208184018101805160a7825292820194820194909420919093529091526000908152604090208054600182015460028301546003909301549192909184565b34801561074757600080fd5b5061059b610756366004614685565b611220565b61059b61076936600461460e565b6112d6565b61059b61077c36600461472a565b61172d565b61059b61078f36600461472a565b6119a3565b3480156107a057600080fd5b5061059b6107af3660046147a4565b611c0a565b3480156107c057600080fd5b5061041e6107cf36600461433f565b60a66020526000908152604090208054600182015460028301546003909301549192909184565b34801561080257600080fd5b5061059b610811366004614685565b611f0c565b34801561082257600080fd5b506104c16108313660046145eb565b60a960209081526000928352604080842090915290825290205481565b34801561085a57600080fd5b50609b546103c790610100900460ff1681565b34801561087957600080fd5b506104c1610888366004614895565b60a4602090815260009283526040909220815180830184018051928152908401929093019190912091525481565b3480156108c257600080fd5b5061059b6108d136600461472a565b611fc3565b3480156108e257600080fd5b506104c17fdf8b4c520ffe197c5343c6f5aec59570151ef9a492f2c624fd45ddde6135ec4281565b34801561091657600080fd5b50609b546103c79062010000900460ff1681565b34801561093657600080fd5b506104c16109453660046144e6565b60a16020526000908152604090205481565b34801561096357600080fd5b5061059b6121b7565b34801561097857600080fd5b506103c76109873660046145eb565b600091825260656020908152604080842073ffffffffffffffffffffffffffffffffffffffff93909316845291905290205460ff1690565b3480156109cb57600080fd5b506104c16109da3660046144e6565b60a36020526000908152604090205481565b3480156109f857600080fd5b506104c1609a5481565b348015610a0e57600080fd5b506104c1600081565b348015610a2357600080fd5b506104c1609c5481565b348015610a3957600080fd5b506104c17ffd2994b76294f3a7e0e5e4e40e73799b954c33f4bff642b5e760fef0d694a92481565b348015610a6d57600080fd5b5061059b610a7c3660046148e3565b6122c3565b348015610a8d57600080fd5b50610aa1610a9c366004614432565b61251e565b6040805182518152602080840151908201529181015173ffffffffffffffffffffffffffffffffffffffff16908201526060016103d3565b348015610ae557600080fd5b506104c17fceb656422d2e5768b364a6526533f6832c483c8cfbd416512fbbd6fa6413f96a81565b348015610b1957600080fd5b506104c1610b283660046149a7565b825160208185018101805160aa825292820195820195909520919094528352600091825260408083209093528152205481565b348015610b6757600080fd5b5061059b610b763660046148e3565b6125b4565b348015610b8757600080fd5b50609b546103c7906301000000900460ff1681565b348015610ba857600080fd5b5061059b610bb73660046149fe565b612804565b348015610bc857600080fd5b5061059b610bd736600461433f565b612865565b348015610be857600080fd5b5061059b610bf7366004614685565b6128e9565b348015610c0857600080fd5b50610532610c17366004614a5b565b612979565b348015610c2857600080fd5b50609b546103c79060ff1681565b348015610c4257600080fd5b5061059b610c5136600461433f565b612a3d565b348015610c6257600080fd5b5061059b610c713660046145eb565b612ac1565b348015610c8257600080fd5b50610cd3610c91366004614432565b805160208183018101805160a88252928201919093012091528054600182015460029092015490919073ffffffffffffffffffffffffffffffffffffffff1683565b60408051938452602084019290925273ffffffffffffffffffffffffffffffffffffffff16908201526060016103d3565b61059b610d12366004614a7e565b612ae6565b348015610d2357600080fd5b5061059b610d3236600461433f565b612e60565b348015610d4357600080fd5b5061059b610d5236600461433f565b612ee4565b61059b610d65366004614ace565b612f68565b348015610d7657600080fd5b5061068d610d85366004614b51565b6133e8565b348015610d9657600080fd5b506104c1610da53660046144e6565b60a06020526000908152604090205481565b348015610dc357600080fd5b5061059b610dd2366004614bb2565b613472565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f7965db0b000000000000000000000000000000000000000000000000000000001480610e6a57507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316145b92915050565b610e9b6040518060800160405280600081526020016000815260200160008152602001600081525090565b60a78484604051610ead929190614bfb565b90815260408051602092819003830181206000958652835293819020608085018252805485526001810154928501929092526002820154908401526003015460608301525092915050565b3360009081527f3a5f6b5b20ab0e425b1c7c9823b9866065cea388466bf7d4f12b2ad1dfbaf604602052604090205460ff16610f4757604051634ca8886760e01b815260040160405180910390fd5b8060ab83604051610f589190614c2f565b908152604051908190036020018120805492151560ff19909316929092179091557f81a0ab3096d0711caafd488b7a6d925320dbb9e6ae99f862b35ec7323af9826590610fa89083908590614c95565b60405180910390a15050565b600082815260656020526040902060010154610fcf8161398b565b610fd98383613998565b505050565b73ffffffffffffffffffffffffffffffffffffffff81163314611088576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201527f20726f6c657320666f722073656c66000000000000000000000000000000000060648201526084015b60405180910390fd5b6110928282613a6e565b5050565b60008060008060a7866040516110ac9190614c2f565b908152604080516020928190038301902060008a8152925281205491506110d38983614cdf565b9050606460a8876040516110e79190614c2f565b908152604051908190036020019020546111019083614cdf565b61110b9190614cf6565b9250606460a88760405161111f9190614c2f565b9081526020016040518091039020600101548261113c9190614cdf565b6111469190614cf6565b93506111528382614d31565b945050509450945094915050565b3360009081527f3a5f6b5b20ab0e425b1c7c9823b9866065cea388466bf7d4f12b2ad1dfbaf604602052604090205460ff166111af57604051634ca8886760e01b815260040160405180910390fd5b609b8054821515610100027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff9091161790556040517f9f5cf153333ec6c3f336a73d8dd75b350a36948f61b0b13ae43af5b5c144a6f59061121590831515815260200190565b60405180910390a150565b3360009081527f3a5f6b5b20ab0e425b1c7c9823b9866065cea388466bf7d4f12b2ad1dfbaf604602052604090205460ff1661126f57604051634ca8886760e01b815260040160405180910390fd5b609b805482151562010000027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ffff9091161790556040517f643f3a44207851ae16a2c404fa7307be53087b3a8e378e0c908e592c64f506699061121590831515815260200190565b60ab826040516112e69190614c2f565b9081526040519081900360200190205460ff1661132f576040517fb4eb177f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60a78260405161133f9190614c2f565b90815260408051918290036020908101832060008781529152206003015490859060a79061136e908690614c2f565b908152602001604051809103902060008681526020019081526020016000206002015461139b9190614d44565b11156113d3576040517f98a3f79100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60a7826040516113e39190614c2f565b90815260408051918290036020908101832060008781529152206001015490859060aa90611412908690614c2f565b908152604080516020928190038301902060008881529083528181203382529092529020546114419190614d44565b1115611479576040517fbbd4c2bd00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008061148886868686611096565b5091509150813410156114c7576040517fcd1c886700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80156115fb57600060a8846040516114df9190614c2f565b9081526040519081900360200181206002015473ffffffffffffffffffffffffffffffffffffffff1690839060006040518083038185875af1925050503d8060008114611548576040519150601f19603f3d011682016040523d82523d6000602084013e61154d565b606091505b5050905080611588576040517f1ac89c8000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60a8846040516115989190614c2f565b9081526040519081900360200181206002015473ffffffffffffffffffffffffffffffffffffffff16907f32f584d0754f9710dea21e509acf4c6b5885c93f3cf96f1ed74256887485d130906115f19087908690614d57565b60405180910390a2505b600061160633613b0b565b905060a8816040516116189190614c2f565b9081526040519081900360200190205460000361163f5761163f8133609c54609d54613b2e565b8660a7866040516116509190614c2f565b9081526020016040518091039020600088815260200190815260200160002060020160008282546116819190614d44565b925050819055508660a2866040516116999190614c2f565b90815260408051602092819003830190203360009081529252812080549091906116c4908490614d44565b9250508190555086609e60008282546116dd9190614d44565b9091555050604051869033907fa85906c3100968a0ea21181f8a4c6d299823828a0573f27a6c17a68c1af4a4ec9061171c908b9088908b908b90614d79565b60405180910390a350505050505050565b609b54610100900460ff1661176e576040517f7856fae200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008061177d85870187614db5565b33600090815260a0602052604090205491935091508161179d828a614d44565b11156117d5576040517f7a399cc900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60408051602081018590527fffffffffffffffffffffffffffffffffffffffff0000000000000000000000003360601b169181019190915260548101839052600090607401604051602081830303815290604052805190602001209050611873868680806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250506098549150849050613c94565b6118a9576040517f09bde33900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600090815260a56020527f3cdd87bd16aed04484229287c5bc39384778a2cba3efb90ce9f23f83f81cfedb546118e2908b90614cdf565b90508034101561191e576040517fcd1c886700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b33600090815260a06020526040812080548c929061193d908490614d44565b9250508190555089609e60008282546119569190614d44565b909155505060408051828152602081018c905233917f09f1b238e0c956383f51f6a0a249784a40ca5b7a87c8b151a727016be60cccd591015b60405180910390a250505050505050505050565b609b5462010000900460ff166119e5576040517f724187c200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000806119f485870187614db5565b33600090815260a16020526040902054919350915081611a14828a614d44565b1115611a4c576040517f7a399cc900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60408051602081018590527fffffffffffffffffffffffffffffffffffffffff0000000000000000000000003360601b169181019190915260548101839052600090607401604051602081830303815290604052805190602001209050611aea868680806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250506099549150849050613c94565b611b20576040517f09bde33900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600090815260a56020527f3cdd87bd16aed04484229287c5bc39384778a2cba3efb90ce9f23f83f81cfedb54611b59908b90614cdf565b905080341015611b95576040517fcd1c886700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b33600090815260a16020526040812080548c9290611bb4908490614d44565b9250508190555089609e6000828254611bcd9190614d44565b909155505060408051828152602081018c905233917f7d6d20e50ff90d3c35b2d0182ab7dd6825df9759011eb6ae1499640a2c2b2eeb910161198f565b3360009081527f9de19bebcfec5fefaa13a42edbcc11cb6ff633bb0eb0a7f29bcb2311657057e0602052604090205460ff16611c5957604051634ca8886760e01b815260040160405180910390fd5b8887141580611c685750868514155b80611c735750848314155b80611c7e5750828114155b15611cb5576040517f8d7b788500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b87811015611eff57600060a78c8c84818110611cd657611cd6614dd7565b9050602002810190611ce89190614e06565b604051611cf6929190614bfb565b908152602001604051809103902060008b8b85818110611d1857611d18614dd7565b9050602002013581526020019081526020016000206002015490506040518060800160405280898985818110611d5057611d50614dd7565b905060200201358152602001878785818110611d6e57611d6e614dd7565b905060200201358152602001828152602001858585818110611d9257611d92614dd7565b9050602002013581525060a78d8d85818110611db057611db0614dd7565b9050602002810190611dc29190614e06565b604051611dd0929190614bfb565b908152602001604051809103902060008c8c86818110611df257611df2614dd7565b90506020020135815260200190815260200160002060008201518160000155602082015181600101556040820151816002015560608201518160030155905050898983818110611e4457611e44614dd7565b905060200201357fb594049245992a738d373cbadb4c71bff13c5415bb08132a24528b25700adc8f8d8d85818110611e7e57611e7e614dd7565b9050602002810190611e909190614e06565b8b8b87818110611ea257611ea2614dd7565b905060200201358a8a88818110611ebb57611ebb614dd7565b90506020020135868a8a8a818110611ed557611ed5614dd7565b90506020020135604051611eee96959493929190614e6b565b60405180910390a250600101611cb8565b5050505050505050505050565b3360009081527f3a5f6b5b20ab0e425b1c7c9823b9866065cea388466bf7d4f12b2ad1dfbaf604602052604090205460ff16611f5b57604051634ca8886760e01b815260040160405180910390fd5b609b80548215156301000000027fffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ffffff9091161790556040517f3b7b44afae3b983507896693d669f6119d5ab003ec1ab51123108429bd5d46d79061121590831515815260200190565b609b5460ff16611fff576040517f27dc08c400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008061200e85870187614db5565b336000908152609f602052604090205491935091508161202e828a614d44565b1115612066576040517f7a399cc900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60408051602081018590527fffffffffffffffffffffffffffffffffffffffff0000000000000000000000003360601b169181019190915260548101839052600090607401604051602081830303815290604052805190602001209050612104868680806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250506097549150849050613c94565b61213a576040517f09bde33900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b336000908152609f6020526040812080548b9290612159908490614d44565b9250508190555088609e60008282546121729190614d44565b909155505060405189815233907fdcf2314e0115a42fe2b3fcfb533c03e95dc48bc7769a9c2b61a14883c0b449e09060200160405180910390a2505050505050505050565b3360009081527f9de19bebcfec5fefaa13a42edbcc11cb6ff633bb0eb0a7f29bcb2311657057e0602052604090205460ff1661220657604051634ca8886760e01b815260040160405180910390fd5b6040514790600090339083908381818185875af1925050503d806000811461224a576040519150601f19603f3d011682016040523d82523d6000602084013e61224f565b606091505b505090508061228a576040517f27fcd9d100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60405182815233907f0f2fb75cc1977a496e94837f859e957f68e26e70dc1b75d9945ee92ae57969ba9060200160405180910390a25050565b3360009081527f9de19bebcfec5fefaa13a42edbcc11cb6ff633bb0eb0a7f29bcb2311657057e0602052604090205460ff1661231257604051634ca8886760e01b815260040160405180910390fd5b86851415806123215750848314155b8061232c5750828114155b15612363576040517f8d7b788500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b8781101561251357600060a560008b8b8581811061238657612386614dd7565b90506020020135815260200190815260200160002060020154905060405180608001604052808989858181106123be576123be614dd7565b9050602002013581526020018787858181106123dc576123dc614dd7565b90506020020135815260200182815260200185858581811061240057612400614dd7565b9050602002013581525060a560008c8c8681811061242057612420614dd7565b9050602002013581526020019081526020016000206000820151816000015560208201518160010155604082015181600201556060820151816003015590505089898381811061247257612472614dd7565b905060200201357fefd55558319646aa70e53c48ba0480d26d9fdce9d6399432fac9356ee254944c8989858181106124ac576124ac614dd7565b905060200201358888868181106124c5576124c5614dd7565b90506020020135848888888181106124df576124df614dd7565b604080519687526020878101969096528601939093525091020135606082015260800160405180910390a250600101612366565b505050505050505050565b61255860405180606001604052806000815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff1681525090565b60a8826040516125689190614c2f565b908152604080519182900360209081018320606084018352805484526001810154918401919091526002015473ffffffffffffffffffffffffffffffffffffffff169082015292915050565b3360009081527f9de19bebcfec5fefaa13a42edbcc11cb6ff633bb0eb0a7f29bcb2311657057e0602052604090205460ff1661260357604051634ca8886760e01b815260040160405180910390fd5b86851415806126125750848314155b8061261d5750828114155b15612654576040517f8d7b788500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b8781101561251357600060a660008b8b8581811061267757612677614dd7565b90506020020135815260200190815260200160002060020154905060405180608001604052808989858181106126af576126af614dd7565b9050602002013581526020018787858181106126cd576126cd614dd7565b9050602002013581526020018281526020018585858181106126f1576126f1614dd7565b9050602002013581525060a660008c8c8681811061271157612711614dd7565b9050602002013581526020019081526020016000206000820151816000015560208201518160010155604082015181600201556060820151816003015590505089898381811061276357612763614dd7565b905060200201357fc9dc860a4ebff48880e12d6561e76353bec03d096d8339da1a00c77b2e672ccb89898581811061279d5761279d614dd7565b905060200201358888868181106127b6576127b6614dd7565b90506020020135848888888181106127d0576127d0614dd7565b604080519687526020878101969096528601939093525091020135606082015260800160405180910390a250600101612657565b3360009081527f93597da006e5eb572f6ec69e1ccdaa385853d6a136697cd54f88b4acaace9499602052604090205460ff1661285357604051634ca8886760e01b815260040160405180910390fd5b61285f84848484613b2e565b50505050565b3360009081527f0f8f48858e118d2eab32cf95c88221b6c0a0d6e1fed7aef78e355435fa71bc6f602052604090205460ff166128b457604051634ca8886760e01b815260040160405180910390fd5b609a8190556040518181527f1113c739a7b79ad7fe9572522e32b648f09eb5b1c329efd91dcb309da05541fb90602001611215565b3360009081527f3a5f6b5b20ab0e425b1c7c9823b9866065cea388466bf7d4f12b2ad1dfbaf604602052604090205460ff1661293857604051634ca8886760e01b815260040160405180910390fd5b609b805460ff19168215159081179091556040519081527fadafd3bec1c754707cbddc626a6214c879cecc475375ff8f5a1dbc329939869390602001611215565b6129a46040518060800160405280600081526020016000815260200160008152602001600081525090565b81156129f75760a560008481526020019081526020016000206040518060800160405290816000820154815260200160018201548152602001600282015481526020016003820154815250509050610e6a565b5050600090815260a66020908152604091829020825160808101845281548152600182015492810192909252600281015492820192909252600390910154606082015290565b3360009081527f0f8f48858e118d2eab32cf95c88221b6c0a0d6e1fed7aef78e355435fa71bc6f602052604090205460ff16612a8c57604051634ca8886760e01b815260040160405180910390fd5b60998190556040518181527fed5a3c80523111a140a98ec8643e5fb5ac073fe6b8528163c00123af11e4b31a90602001611215565b600082815260656020526040902060010154612adc8161398b565b610fd98383613a6e565b609b546301000000900460ff16612b29576040517fc7d08f0400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600082815260a5602052604090206003810154600290910154612b4d908590614d44565b1115612b85576040517f98a3f79100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600082815260a5602090815260408083206001015460a9835281842033855290925290912054612bb6908590614d44565b1115612bee576040517fbbd4c2bd00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600080612bfe85858560006133e8565b509150915081341015612c3d576040517fcd1c886700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8015612d7157600060a884604051612c559190614c2f565b9081526040519081900360200181206002015473ffffffffffffffffffffffffffffffffffffffff1690839060006040518083038185875af1925050503d8060008114612cbe576040519150601f19603f3d011682016040523d82523d6000602084013e612cc3565b606091505b5050905080612cfe576040517f1ac89c8000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60a884604051612d0e9190614c2f565b9081526040519081900360200181206002015473ffffffffffffffffffffffffffffffffffffffff16907f32f584d0754f9710dea21e509acf4c6b5885c93f3cf96f1ed74256887485d13090612d679087908690614d57565b60405180910390a2505b6000612d7c33613b0b565b905060a881604051612d8e9190614c2f565b90815260405190819003602001902054600003612db557612db58133609c54609d54613b2e565b600085815260a5602052604081206002018054889290612dd6908490614d44565b909155505033600090815260a3602052604081208054889290612dfa908490614d44565b9250508190555085609e6000828254612e139190614d44565b9091555050604051859033907f667f777d5c0d93b002117ea7ffc49143b4c2180cb35b02848c4ab62631a0cd2590612e50908a9088908a90614ed7565b60405180910390a3505050505050565b3360009081527f0f8f48858e118d2eab32cf95c88221b6c0a0d6e1fed7aef78e355435fa71bc6f602052604090205460ff16612eaf57604051634ca8886760e01b815260040160405180910390fd5b60978190556040518181527f9811c75983304a889ec0cb24de6cb2a102ceef14040efeca89e8361047af9daf90602001611215565b3360009081527f0f8f48858e118d2eab32cf95c88221b6c0a0d6e1fed7aef78e355435fa71bc6f602052604090205460ff16612f3357604051634ca8886760e01b815260040160405180910390fd5b60988190556040518181527fa9def886987ec775de3f208d9045235d630a49852d8da931fa98c53e9c4a799590602001611215565b609b546301000000900460ff16612fab576040517fc7d08f0400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008080612fbb86880188614a7e565b60008b815260a6602052604090206003810154600290910154939650919450925090612fe8908b90614d44565b1115613020576040517f98a3f79100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b33600090815260a46020526040808220905161303d908490614c2f565b9081526040519081900360200190205490508261305a828c614d44565b1115613092576040517f7a399cc900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000843385856040516020016130ab9493929190614eff565b60405160208183030381529060405280519060200120905061310487878080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050609a549150849050613c94565b61313a576040517f09bde33900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5060008061314b8c8c8660016133e8565b50915091508134101561318a576040517fcd1c886700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80156132be57600060a8856040516131a29190614c2f565b9081526040519081900360200181206002015473ffffffffffffffffffffffffffffffffffffffff1690839060006040518083038185875af1925050503d806000811461320b576040519150601f19603f3d011682016040523d82523d6000602084013e613210565b606091505b505090508061324b576040517f1ac89c8000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60a88560405161325b9190614c2f565b9081526040519081900360200181206002015473ffffffffffffffffffffffffffffffffffffffff16907f32f584d0754f9710dea21e509acf4c6b5885c93f3cf96f1ed74256887485d130906132b49088908690614d57565b60405180910390a2505b60006132c933613b0b565b905060a8816040516132db9190614c2f565b90815260405190819003602001902054600003613302576133028133609c54609d54613b2e565b60008c815260a66020526040812060020180548f9290613323908490614d44565b909155505033600090815260a460205260409081902090518e9190613349908890614c2f565b908152602001604051809103902060008282546133669190614d44565b925050819055508c609e600082825461337f9190614d44565b925050819055508b3373ffffffffffffffffffffffffffffffffffffffff167fc72e71a3feffde96ea8e1ea0580c51515589e1191e54ae4152c6446d43770b8c8f86896040516133d193929190614ed7565b60405180910390a350505050505050505050505050565b60008060008084156134095750600086815260a6602052604090205461341a565b50600086815260a560205260409020545b60006134268983614cdf565b9050606460a88860405161343a9190614c2f565b908152604051908190036020019020546134549083614cdf565b61345e9190614cf6565b9250606460a88860405161111f9190614c2f565b600054610100900460ff16158080156134925750600054600160ff909116105b806134ac5750303b1580156134ac575060005460ff166001145b613538576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a6564000000000000000000000000000000000000606482015260840161107f565b6000805460ff19166001179055801561357857600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff166101001790555b613580613caa565b73ffffffffffffffffffffffffffffffffffffffff85166135e5576040517f8e4c8aa600000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8616600482015260240161107f565b73ffffffffffffffffffffffffffffffffffffffff841661364a576040517f8e4c8aa600000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8516600482015260240161107f565b73ffffffffffffffffffffffffffffffffffffffff83166136af576040517f8e4c8aa600000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8416600482015260240161107f565b73ffffffffffffffffffffffffffffffffffffffff8216613714576040517f8e4c8aa600000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8316600482015260240161107f565b61373e7fdf8b4c520ffe197c5343c6f5aec59570151ef9a492f2c624fd45ddde6135ec4286613998565b6137687fdf8b4c520ffe197c5343c6f5aec59570151ef9a492f2c624fd45ddde6135ec4280613d43565b6137927f8b5b16d04624687fcf0d0228f19993c9157c1ed07b41d8d430fd9100eb099fe885613998565b6137bc7f8b5b16d04624687fcf0d0228f19993c9157c1ed07b41d8d430fd9100eb099fe886613998565b6138067f8b5b16d04624687fcf0d0228f19993c9157c1ed07b41d8d430fd9100eb099fe87fdf8b4c520ffe197c5343c6f5aec59570151ef9a492f2c624fd45ddde6135ec42613d43565b6138307ffd2994b76294f3a7e0e5e4e40e73799b954c33f4bff642b5e760fef0d694a92484613998565b61387a7ffd2994b76294f3a7e0e5e4e40e73799b954c33f4bff642b5e760fef0d694a9247fdf8b4c520ffe197c5343c6f5aec59570151ef9a492f2c624fd45ddde6135ec42613d43565b6138a47fceb656422d2e5768b364a6526533f6832c483c8cfbd416512fbbd6fa6413f96a83613998565b6138ee7fceb656422d2e5768b364a6526533f6832c483c8cfbd416512fbbd6fa6413f96a7fdf8b4c520ffe197c5343c6f5aec59570151ef9a492f2c624fd45ddde6135ec42613d43565b6005609c819055609d556040517f9f4eefba9f06bdd612ec93892ddb6d0bf72365e3835c1159ce2f0b9f172bfcbd90600090a1801561398457600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050505050565b6139958133613d8e565b50565b600082815260656020908152604080832073ffffffffffffffffffffffffffffffffffffffff8516845290915290205460ff1661109257600082815260656020908152604080832073ffffffffffffffffffffffffffffffffffffffff851684529091529020805460ff19166001179055613a103390565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b600082815260656020908152604080832073ffffffffffffffffffffffffffffffffffffffff8516845290915290205460ff161561109257600082815260656020908152604080832073ffffffffffffffffffffffffffffffffffffffff85168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6060610e6a73ffffffffffffffffffffffffffffffffffffffff83166014613e48565b6032811115613b69576040517f997ea36000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6032821115613ba4576040517fdc81db8500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8060a885604051613bb59190614c2f565b90815260405190819003602001812091909155829060a890613bd8908790614c2f565b9081526020016040518091039020600101819055508260a885604051613bfe9190614c2f565b908152604051908190036020018120600201805473ffffffffffffffffffffffffffffffffffffffff9384167fffffffffffffffffffffffff0000000000000000000000000000000000000000909116179055908416907fab01b91658e399ea84d00e2fef9a83efae42fb6f4114c76abf714ff3a34db4c390613c8690879086908690614f58565b60405180910390a250505050565b600082613ca18584614092565b14949350505050565b600054610100900460ff16613d41576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e67000000000000000000000000000000000000000000606482015260840161107f565b565b600082815260656020526040808220600101805490849055905190918391839186917fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff9190a4505050565b600082815260656020908152604080832073ffffffffffffffffffffffffffffffffffffffff8516845290915290205460ff1661109257613dce816140d5565b613dd98360206140f4565b604051602001613dea929190614f7d565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0818403018152908290527f08c379a000000000000000000000000000000000000000000000000000000000825261107f91600401614ffe565b60606000613e57836002614cdf565b613e62906002614d44565b67ffffffffffffffff811115613e7a57613e7a614358565b6040519080825280601f01601f191660200182016040528015613ea4576020820181803683370190505b5090507f300000000000000000000000000000000000000000000000000000000000000081600081518110613edb57613edb614dd7565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f780000000000000000000000000000000000000000000000000000000000000081600181518110613f3e57613f3e614dd7565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053506000613f7a846002614cdf565b613f85906001614d44565b90505b6001811115614022577f303132333435363738396162636465660000000000000000000000000000000085600f1660108110613fc657613fc6614dd7565b1a60f81b828281518110613fdc57613fdc614dd7565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060049490941c9361401b81615011565b9050613f88565b50831561408b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e74604482015260640161107f565b9392505050565b600081815b84518110156140cd576140c3828683815181106140b6576140b6614dd7565b60200260200101516142ce565b9150600101614097565b509392505050565b6060610e6a73ffffffffffffffffffffffffffffffffffffffff831660145b60606000614103836002614cdf565b61410e906002614d44565b67ffffffffffffffff81111561412657614126614358565b6040519080825280601f01601f191660200182016040528015614150576020820181803683370190505b5090507f30000000000000000000000000000000000000000000000000000000000000008160008151811061418757614187614dd7565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f7800000000000000000000000000000000000000000000000000000000000000816001815181106141ea576141ea614dd7565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053506000614226846002614cdf565b614231906001614d44565b90505b6001811115614022577f303132333435363738396162636465660000000000000000000000000000000085600f166010811061427257614272614dd7565b1a60f81b82828151811061428857614288614dd7565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060049490941c936142c781615011565b9050614234565b60008183106142ea57600082815260208490526040902061408b565b600083815260208390526040902061408b565b60006020828403121561430f57600080fd5b81357fffffffff000000000000000000000000000000000000000000000000000000008116811461408b57600080fd5b60006020828403121561435157600080fd5b5035919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600082601f83011261439857600080fd5b813567ffffffffffffffff808211156143b3576143b3614358565b604051601f83017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f011681019082821181831017156143f9576143f9614358565b8160405283815286602085880101111561441257600080fd5b836020870160208301376000602085830101528094505050505092915050565b60006020828403121561444457600080fd5b813567ffffffffffffffff81111561445b57600080fd5b61446784828501614387565b949350505050565b803573ffffffffffffffffffffffffffffffffffffffff8116811461449357600080fd5b919050565b600080604083850312156144ab57600080fd5b823567ffffffffffffffff8111156144c257600080fd5b6144ce85828601614387565b9250506144dd6020840161446f565b90509250929050565b6000602082840312156144f857600080fd5b61408b8261446f565b60008083601f84011261451357600080fd5b50813567ffffffffffffffff81111561452b57600080fd5b60208301915083602082850101111561454357600080fd5b9250929050565b60008060006040848603121561455f57600080fd5b833567ffffffffffffffff81111561457657600080fd5b61458286828701614501565b909790965060209590950135949350505050565b8035801515811461449357600080fd5b600080604083850312156145b957600080fd5b823567ffffffffffffffff8111156145d057600080fd5b6145dc85828601614387565b9250506144dd60208401614596565b600080604083850312156145fe57600080fd5b823591506144dd6020840161446f565b6000806000806080858703121561462457600080fd5b8435935060208501359250604085013567ffffffffffffffff8082111561464a57600080fd5b61465688838901614387565b9350606087013591508082111561466c57600080fd5b5061467987828801614387565b91505092959194509250565b60006020828403121561469757600080fd5b61408b82614596565b600080604083850312156146b357600080fd5b823567ffffffffffffffff8111156146ca57600080fd5b6146d685828601614387565b95602094909401359450505050565b60008083601f8401126146f757600080fd5b50813567ffffffffffffffff81111561470f57600080fd5b6020830191508360208260051b850101111561454357600080fd5b60008060008060006060868803121561474257600080fd5b85359450602086013567ffffffffffffffff8082111561476157600080fd5b61476d89838a01614501565b9096509450604088013591508082111561478657600080fd5b50614793888289016146e5565b969995985093965092949392505050565b60008060008060008060008060008060a08b8d0312156147c357600080fd5b8a3567ffffffffffffffff808211156147db57600080fd5b6147e78e838f016146e5565b909c509a5060208d013591508082111561480057600080fd5b61480c8e838f016146e5565b909a50985060408d013591508082111561482557600080fd5b6148318e838f016146e5565b909850965060608d013591508082111561484a57600080fd5b6148568e838f016146e5565b909650945060808d013591508082111561486f57600080fd5b5061487c8d828e016146e5565b915080935050809150509295989b9194979a5092959850565b600080604083850312156148a857600080fd5b6148b18361446f565b9150602083013567ffffffffffffffff8111156148cd57600080fd5b6148d985828601614387565b9150509250929050565b6000806000806000806000806080898b0312156148ff57600080fd5b883567ffffffffffffffff8082111561491757600080fd5b6149238c838d016146e5565b909a50985060208b013591508082111561493c57600080fd5b6149488c838d016146e5565b909850965060408b013591508082111561496157600080fd5b61496d8c838d016146e5565b909650945060608b013591508082111561498657600080fd5b506149938b828c016146e5565b999c989b5096995094979396929594505050565b6000806000606084860312156149bc57600080fd5b833567ffffffffffffffff8111156149d357600080fd5b6149df86828701614387565b935050602084013591506149f56040850161446f565b90509250925092565b60008060008060808587031215614a1457600080fd5b843567ffffffffffffffff811115614a2b57600080fd5b614a3787828801614387565b945050614a466020860161446f565b93969395505050506040820135916060013590565b60008060408385031215614a6e57600080fd5b823591506144dd60208401614596565b600080600060608486031215614a9357600080fd5b8335925060208401359150604084013567ffffffffffffffff811115614ab857600080fd5b614ac486828701614387565b9150509250925092565b60008060008060008060808789031215614ae757600080fd5b8635955060208701359450604087013567ffffffffffffffff80821115614b0d57600080fd5b614b198a838b01614501565b90965094506060890135915080821115614b3257600080fd5b50614b3f89828a016146e5565b979a9699509497509295939492505050565b60008060008060808587031215614b6757600080fd5b8435935060208501359250604085013567ffffffffffffffff811115614b8c57600080fd5b614b9887828801614387565b925050614ba760608601614596565b905092959194509250565b60008060008060808587031215614bc857600080fd5b614bd18561446f565b9350614bdf6020860161446f565b9250614bed6040860161446f565b9150614ba76060860161446f565b8183823760009101908152919050565b60005b83811015614c26578181015183820152602001614c0e565b50506000910152565b60008251614c41818460208701614c0b565b9190910192915050565b60008151808452614c63816020860160208601614c0b565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b82151581526040602082015260006144676040830184614c4b565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b8082028115828204841417610e6a57610e6a614cb0565b600082614d2c577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b81810381811115610e6a57610e6a614cb0565b80820180821115610e6a57610e6a614cb0565b604081526000614d6a6040830185614c4b565b90508260208301529392505050565b848152836020820152608060408201526000614d986080830185614c4b565b8281036060840152614daa8185614c4b565b979650505050505050565b60008060408385031215614dc857600080fd5b50508035926020909101359150565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1843603018112614e3b57600080fd5b83018035915067ffffffffffffffff821115614e5657600080fd5b60200191503681900382131561454357600080fd5b60a081528560a0820152858760c0830137600060c08783010152600060c07fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8901168301019050856020830152846040830152836060830152826080830152979650505050505050565b838152826020820152606060408201526000614ef66060830184614c4b565b95945050505050565b8481527fffffffffffffffffffffffffffffffffffffffff0000000000000000000000008460601b16602082015282603482015260008251614f48816054850160208701614c0b565b9190910160540195945050505050565b606081526000614f6b6060830186614c4b565b60208301949094525060400152919050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351614fb5816017850160208801614c0b565b7f206973206d697373696e6720726f6c65200000000000000000000000000000006017918401918201528351614ff2816028840160208801614c0b565b01602801949350505050565b60208152600061408b6020830184614c4b565b60008161502057615020614cb0565b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff019056fea26469706673582212206947e8d7a39671f78eaf5acdcb545540cb682926ea8bb1f37488404fc6c9bc7d64736f6c63430008180033",
  "devdoc": {
    "author": "Archethect",
    "events": {
      "Initialized(uint8)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      },
      "RoleAdminChanged(bytes32,bytes32,bytes32)": {
        "details": "Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._"
      },
      "RoleGranted(bytes32,address,address)": {
        "details": "Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."
      },
      "RoleRevoked(bytes32,address,address)": {
        "details": "Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"
      }
    },
    "kind": "dev",
    "methods": {
      "claimLicenseEarlyAccess(uint256,bytes,bytes32[])": {
        "params": {
          "amount": "The amount of licenses to claim",
          "data": "Index and claimCap in encoded format",
          "merkleProof": "The proof used to verify whether the caller is allowed to claim the licenses"
        }
      },
      "claimLicenseFriendsFamily(uint256,bytes,bytes32[])": {
        "params": {
          "amount": "The amount of licenses to claim",
          "data": "Index and claimCap in encoded format",
          "merkleProof": "The proof used to verify weather the caller is allowed to claim the licenses"
        }
      },
      "claimLicensePartner(uint256,uint256,string,string)": {
        "params": {
          "amount": "The amount of licenses to claim",
          "partnerCode": "The code of the partner sale",
          "referral": "A referral code that can give discounts."
        }
      },
      "claimLicensePublic(uint256,uint256,string)": {
        "params": {
          "amount": "The amount of licenses to claim",
          "referral": "A referral code that can give discounts.",
          "tier": "The tier to buy the licenses from"
        }
      },
      "claimLicensePublicWhitelist(uint256,uint256,bytes,bytes32[])": {
        "params": {
          "amount": "The amount of licenses to claim",
          "data": "Index, claimCap and referral in encoded format",
          "merkleProof": "The proof used to verify weather the caller is allowed to claim the licenses",
          "tier": "The tier to buy the licenses from"
        }
      },
      "claimLicenseTeam(uint256,bytes,bytes32[])": {
        "params": {
          "amount": "The amount of licenses to claim",
          "data": "Index and claimCap in encoded format",
          "merkleProof": "The proof used to verify whether the caller is allowed to claim the licenses"
        }
      },
      "constructor": {
        "custom:oz-upgrades-unsafe-allow": "constructor"
      },
      "getPartnerTier(string,uint256)": {
        "params": {
          "id": "The tier id",
          "partnerCode": "The code of the partner to return the tier from"
        },
        "returns": {
          "tier": "The tier"
        }
      },
      "getReferral(string)": {
        "params": {
          "id": "The referral id"
        },
        "returns": {
          "referral": "The referral"
        }
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "getTier(uint256,bool)": {
        "params": {
          "id": "The tier id",
          "isWhitelist": "Whether the tier is used for the whitelist sale or not"
        },
        "returns": {
          "tier": "The tier"
        }
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "paymentDetailsForPartnerReferral(uint256,uint256,string,string)": {
        "params": {
          "amount": "The amount of licenses to claim",
          "partnerCode": "The code identifying the partner sale",
          "referral": "A referral code that can give discounts.",
          "tier": "The tier to buy the licenses from"
        },
        "returns": {
          "commission": "The commission in ETH that the referrer will get.",
          "discount": "The discount in ETH the claimer will get",
          "toPay": "The amount of ETH that should be paid by the claimer."
        }
      },
      "paymentDetailsForReferral(uint256,uint256,string,bool)": {
        "params": {
          "amount": "The amount of licenses to claim",
          "isWhitelist": "Whether the tier is used for the whitelist sale or not",
          "referral": "A referral code that can give discounts.",
          "tier": "The tier to buy the licenses from"
        },
        "returns": {
          "commission": "The commission in ETH that the referrer will get.",
          "discount": "The discount in ETH the claimer will get",
          "toPay": "The amount of ETH that should be paid by the claimer."
        }
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "setEarlyAccessMerkleRoot(bytes32)": {
        "params": {
          "_earlyAccessMerkleRoot": "The root of the early access sale merkle tree"
        }
      },
      "setEarlyAccessSale(bool)": {
        "params": {
          "status": "The status to set for the early access sale"
        }
      },
      "setFriendsFamilyMerkleRoot(bytes32)": {
        "params": {
          "_friendsFamilyMerkleRoot": "The root of the friends and family sale merkle tree"
        }
      },
      "setFriendsFamilySale(bool)": {
        "params": {
          "status": "The status to set for the friends and family sale"
        }
      },
      "setPartnerSale(string,bool)": {
        "params": {
          "partnerCode": "The code of the partner sale to set the status from",
          "status": "The status to set for the partner sale"
        }
      },
      "setPartnerTiers(string[],uint256[],uint256[],uint256[],uint256[])": {
        "params": {
          "ids": "The ids of the tiers to set",
          "individualCaps": "The maximum amount of licenses that can be claimed per address for the tiers.",
          "partnerCodes": "The codes of the partners to configure the tiers for",
          "prices": "The prices of each tier to set",
          "totalCaps": "The maximum amount of licenses that can be claimed in total for the tiers."
        }
      },
      "setPublicMerkleRoot(bytes32)": {
        "params": {
          "_publicMerkleRoot": "The root of the public sale merkle tree"
        }
      },
      "setPublicSale(bool)": {
        "params": {
          "status": "The status to set for the public sale"
        }
      },
      "setReferral(string,address,uint256,uint256)": {
        "params": {
          "code": "The referral code to be used when claiming",
          "commission": "The percentage of the total price to be used as a commission",
          "discount": "The percentage of the total price to be used as a discount",
          "receiver": "The receiver address for the commissions"
        }
      },
      "setTeamMerkleRoot(bytes32)": {
        "params": {
          "_teamMerkleRoot": "The root of the team sale merkle tree"
        }
      },
      "setTeamSale(bool)": {
        "params": {
          "status": "The status to set for the team sale"
        }
      },
      "setTiers(uint256[],uint256[],uint256[],uint256[])": {
        "params": {
          "ids": "The ids of the tiers to set",
          "individualCaps": "The maximum amount of licenses that can be claimed per address for the tiers.",
          "prices": "The prices of each tier to set",
          "totalCaps": "The maximum amount of licenses that can be claimed in total for the tiers."
        }
      },
      "setWhitelistTiers(uint256[],uint256[],uint256[],uint256[])": {
        "params": {
          "ids": "The ids of the tiers to set",
          "individualCaps": "The maximum amount of licenses that can be claimed per address for the tiers.",
          "prices": "The prices of each tier to set",
          "totalCaps": "The maximum amount of licenses that can be claimed in total for the tiers."
        }
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      }
    },
    "title": "PlayFi node license sale contract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "claimLicenseEarlyAccess(uint256,bytes,bytes32[])": {
        "notice": "Claims licenses for early access addresses + make sure they do not exceed their personal claim cap and that they paid enough."
      },
      "claimLicenseFriendsFamily(uint256,bytes,bytes32[])": {
        "notice": "Claims licenses for friends and family + make sure they do not exceed their personal claim cap and that they paid enough."
      },
      "claimLicensePartner(uint256,uint256,string,string)": {
        "notice": "Claims licenses for partners + make sure they do not exceed their personal claim cap and that they paid enough."
      },
      "claimLicensePublic(uint256,uint256,string)": {
        "notice": "Claims licenses for the public in a specific tier + make sure they do not exceed their personal claim cap and total tier cap. Additionally also make sure that they paid enough."
      },
      "claimLicensePublicWhitelist(uint256,uint256,bytes,bytes32[])": {
        "notice": "Claims licenses for whitelisted addresses during the public sale + make sure they do not exceed their personal claim cap and that they paid enough."
      },
      "claimLicenseTeam(uint256,bytes,bytes32[])": {
        "notice": "Claims licenses for team members and make sure they do not exceed their personal claim cap."
      },
      "getPartnerTier(string,uint256)": {
        "notice": "Returns partner tier details provided a partner code and tier id"
      },
      "getReferral(string)": {
        "notice": "Returns referral details provided a referral id"
      },
      "getTier(uint256,bool)": {
        "notice": "Returns tier details provided a tier id"
      },
      "paymentDetailsForPartnerReferral(uint256,uint256,string,string)": {
        "notice": "Calculates the price, commission and discount for X number of licenses in partner tier Y given referral code Z and partnerCod W"
      },
      "paymentDetailsForReferral(uint256,uint256,string,bool)": {
        "notice": "Calculates the price, commission and discount for X number of licenses in tier Y given referral code Z"
      },
      "setEarlyAccessMerkleRoot(bytes32)": {
        "notice": "Sets the early access sale merkle root"
      },
      "setEarlyAccessSale(bool)": {
        "notice": "Sets the early access sale status"
      },
      "setFriendsFamilyMerkleRoot(bytes32)": {
        "notice": "Sets the friends and family sale merkle root"
      },
      "setFriendsFamilySale(bool)": {
        "notice": "Sets the friends and family sale status"
      },
      "setPartnerSale(string,bool)": {
        "notice": "Sets the partner sale status"
      },
      "setPartnerTiers(string[],uint256[],uint256[],uint256[],uint256[])": {
        "notice": "Sets partner tier details"
      },
      "setPublicMerkleRoot(bytes32)": {
        "notice": "Sets the public sale merkle root"
      },
      "setPublicSale(bool)": {
        "notice": "Sets the public sale status"
      },
      "setReferral(string,address,uint256,uint256)": {
        "notice": "Sets referral details"
      },
      "setTeamMerkleRoot(bytes32)": {
        "notice": "Sets the team sale merkle root"
      },
      "setTeamSale(bool)": {
        "notice": "Sets the team sale status"
      },
      "setTiers(uint256[],uint256[],uint256[],uint256[])": {
        "notice": "Sets tier details"
      },
      "setWhitelistTiers(uint256[],uint256[],uint256[],uint256[])": {
        "notice": "Sets whitelist tier details"
      },
      "withdrawProceeds()": {
        "notice": "Withdraws the sale proceeds"
      }
    },
    "notice": "Contract used to handle whitelist and public node license sales in several tiers.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 416,
        "contract": "contracts/PlayFiLicenseSale.sol:PlayFiLicenseSale",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 419,
        "contract": "contracts/PlayFiLicenseSale.sol:PlayFiLicenseSale",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 958,
        "contract": "contracts/PlayFiLicenseSale.sol:PlayFiLicenseSale",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 1232,
        "contract": "contracts/PlayFiLicenseSale.sol:PlayFiLicenseSale",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 28,
        "contract": "contracts/PlayFiLicenseSale.sol:PlayFiLicenseSale",
        "label": "_roles",
        "offset": 0,
        "slot": "101",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)23_storage)"
      },
      {
        "astId": 335,
        "contract": "contracts/PlayFiLicenseSale.sol:PlayFiLicenseSale",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 3981,
        "contract": "contracts/PlayFiLicenseSale.sol:PlayFiLicenseSale",
        "label": "teamMerkleRoot",
        "offset": 0,
        "slot": "151",
        "type": "t_bytes32"
      },
      {
        "astId": 3984,
        "contract": "contracts/PlayFiLicenseSale.sol:PlayFiLicenseSale",
        "label": "friendsFamilyMerkleRoot",
        "offset": 0,
        "slot": "152",
        "type": "t_bytes32"
      },
      {
        "astId": 3987,
        "contract": "contracts/PlayFiLicenseSale.sol:PlayFiLicenseSale",
        "label": "earlyAccessMerkleRoot",
        "offset": 0,
        "slot": "153",
        "type": "t_bytes32"
      },
      {
        "astId": 3990,
        "contract": "contracts/PlayFiLicenseSale.sol:PlayFiLicenseSale",
        "label": "publicMerkleRoot",
        "offset": 0,
        "slot": "154",
        "type": "t_bytes32"
      },
      {
        "astId": 3993,
        "contract": "contracts/PlayFiLicenseSale.sol:PlayFiLicenseSale",
        "label": "teamSaleActive",
        "offset": 0,
        "slot": "155",
        "type": "t_bool"
      },
      {
        "astId": 3996,
        "contract": "contracts/PlayFiLicenseSale.sol:PlayFiLicenseSale",
        "label": "friendsFamilySaleActive",
        "offset": 1,
        "slot": "155",
        "type": "t_bool"
      },
      {
        "astId": 3999,
        "contract": "contracts/PlayFiLicenseSale.sol:PlayFiLicenseSale",
        "label": "earlyAccessSaleActive",
        "offset": 2,
        "slot": "155",
        "type": "t_bool"
      },
      {
        "astId": 4002,
        "contract": "contracts/PlayFiLicenseSale.sol:PlayFiLicenseSale",
        "label": "publicSaleActive",
        "offset": 3,
        "slot": "155",
        "type": "t_bool"
      },
      {
        "astId": 4005,
        "contract": "contracts/PlayFiLicenseSale.sol:PlayFiLicenseSale",
        "label": "standardCommissionPercentage",
        "offset": 0,
        "slot": "156",
        "type": "t_uint256"
      },
      {
        "astId": 4008,
        "contract": "contracts/PlayFiLicenseSale.sol:PlayFiLicenseSale",
        "label": "standardDiscountPercentage",
        "offset": 0,
        "slot": "157",
        "type": "t_uint256"
      },
      {
        "astId": 4011,
        "contract": "contracts/PlayFiLicenseSale.sol:PlayFiLicenseSale",
        "label": "totalLicenses",
        "offset": 0,
        "slot": "158",
        "type": "t_uint256"
      },
      {
        "astId": 4015,
        "contract": "contracts/PlayFiLicenseSale.sol:PlayFiLicenseSale",
        "label": "teamClaimsPerAddress",
        "offset": 0,
        "slot": "159",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 4019,
        "contract": "contracts/PlayFiLicenseSale.sol:PlayFiLicenseSale",
        "label": "friendsFamilyClaimsPerAddress",
        "offset": 0,
        "slot": "160",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 4023,
        "contract": "contracts/PlayFiLicenseSale.sol:PlayFiLicenseSale",
        "label": "earlyAccessClaimsPerAddress",
        "offset": 0,
        "slot": "161",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 4029,
        "contract": "contracts/PlayFiLicenseSale.sol:PlayFiLicenseSale",
        "label": "partnerClaimsPerAddress",
        "offset": 0,
        "slot": "162",
        "type": "t_mapping(t_string_memory_ptr,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 4033,
        "contract": "contracts/PlayFiLicenseSale.sol:PlayFiLicenseSale",
        "label": "publicClaimsPerAddress",
        "offset": 0,
        "slot": "163",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 4039,
        "contract": "contracts/PlayFiLicenseSale.sol:PlayFiLicenseSale",
        "label": "publicWhitelistClaimsPerAddressAndReferral",
        "offset": 0,
        "slot": "164",
        "type": "t_mapping(t_address,t_mapping(t_string_memory_ptr,t_uint256))"
      },
      {
        "astId": 4044,
        "contract": "contracts/PlayFiLicenseSale.sol:PlayFiLicenseSale",
        "label": "tiers",
        "offset": 0,
        "slot": "165",
        "type": "t_mapping(t_uint256,t_struct(Tier)5888_storage)"
      },
      {
        "astId": 4049,
        "contract": "contracts/PlayFiLicenseSale.sol:PlayFiLicenseSale",
        "label": "whitelistTiers",
        "offset": 0,
        "slot": "166",
        "type": "t_mapping(t_uint256,t_struct(Tier)5888_storage)"
      },
      {
        "astId": 4056,
        "contract": "contracts/PlayFiLicenseSale.sol:PlayFiLicenseSale",
        "label": "partnerTiers",
        "offset": 0,
        "slot": "167",
        "type": "t_mapping(t_string_memory_ptr,t_mapping(t_uint256,t_struct(Tier)5888_storage))"
      },
      {
        "astId": 4061,
        "contract": "contracts/PlayFiLicenseSale.sol:PlayFiLicenseSale",
        "label": "referrals",
        "offset": 0,
        "slot": "168",
        "type": "t_mapping(t_string_memory_ptr,t_struct(Referral)5895_storage)"
      },
      {
        "astId": 4067,
        "contract": "contracts/PlayFiLicenseSale.sol:PlayFiLicenseSale",
        "label": "claimsPerTierPerAddress",
        "offset": 0,
        "slot": "169",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 4075,
        "contract": "contracts/PlayFiLicenseSale.sol:PlayFiLicenseSale",
        "label": "partnerClaimsPerTierPerAddress",
        "offset": 0,
        "slot": "170",
        "type": "t_mapping(t_string_memory_ptr,t_mapping(t_uint256,t_mapping(t_address,t_uint256)))"
      },
      {
        "astId": 4079,
        "contract": "contracts/PlayFiLicenseSale.sol:PlayFiLicenseSale",
        "label": "partnerSaleActive",
        "offset": 0,
        "slot": "171",
        "type": "t_mapping(t_string_memory_ptr,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_string_memory_ptr,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(string => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_string_memory_ptr,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)23_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)23_storage"
      },
      "t_mapping(t_string_memory_ptr,t_bool)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_string_memory_ptr,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_string_memory_ptr,t_mapping(t_uint256,t_mapping(t_address,t_uint256)))": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => mapping(uint256 => mapping(address => uint256)))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
      },
      "t_mapping(t_string_memory_ptr,t_mapping(t_uint256,t_struct(Tier)5888_storage))": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => mapping(uint256 => struct IPlayFiLicenseSale.Tier))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_struct(Tier)5888_storage)"
      },
      "t_mapping(t_string_memory_ptr,t_struct(Referral)5895_storage)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => struct IPlayFiLicenseSale.Referral)",
        "numberOfBytes": "32",
        "value": "t_struct(Referral)5895_storage"
      },
      "t_mapping(t_string_memory_ptr,t_uint256)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_uint256,t_struct(Tier)5888_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct IPlayFiLicenseSale.Tier)",
        "numberOfBytes": "32",
        "value": "t_struct(Tier)5888_storage"
      },
      "t_string_memory_ptr": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Referral)5895_storage": {
        "encoding": "inplace",
        "label": "struct IPlayFiLicenseSale.Referral",
        "members": [
          {
            "astId": 5890,
            "contract": "contracts/PlayFiLicenseSale.sol:PlayFiLicenseSale",
            "label": "discountPercentage",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 5892,
            "contract": "contracts/PlayFiLicenseSale.sol:PlayFiLicenseSale",
            "label": "commissionPercentage",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 5894,
            "contract": "contracts/PlayFiLicenseSale.sol:PlayFiLicenseSale",
            "label": "receiver",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(RoleData)23_storage": {
        "encoding": "inplace",
        "label": "struct AccessControlUpgradeable.RoleData",
        "members": [
          {
            "astId": 20,
            "contract": "contracts/PlayFiLicenseSale.sol:PlayFiLicenseSale",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 22,
            "contract": "contracts/PlayFiLicenseSale.sol:PlayFiLicenseSale",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Tier)5888_storage": {
        "encoding": "inplace",
        "label": "struct IPlayFiLicenseSale.Tier",
        "members": [
          {
            "astId": 5881,
            "contract": "contracts/PlayFiLicenseSale.sol:PlayFiLicenseSale",
            "label": "price",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 5883,
            "contract": "contracts/PlayFiLicenseSale.sol:PlayFiLicenseSale",
            "label": "individualCap",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 5885,
            "contract": "contracts/PlayFiLicenseSale.sol:PlayFiLicenseSale",
            "label": "totalClaimed",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 5887,
            "contract": "contracts/PlayFiLicenseSale.sol:PlayFiLicenseSale",
            "label": "totalCap",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}